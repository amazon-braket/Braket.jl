Py(x::IR.H) = pyjaqcd.H(; arg_gen(x, fieldnames(IR.H))...)
Py(x::H) = pygates.H(; arg_gen(x, fieldnames(H))...)
Py(x::IR.I) = pyjaqcd.I(; arg_gen(x, fieldnames(IR.I))...)
Py(x::I) = pygates.I(; arg_gen(x, fieldnames(I))...)
Py(x::IR.X) = pyjaqcd.X(; arg_gen(x, fieldnames(IR.X))...)
Py(x::X) = pygates.X(; arg_gen(x, fieldnames(X))...)
Py(x::IR.Y) = pyjaqcd.Y(; arg_gen(x, fieldnames(IR.Y))...)
Py(x::Y) = pygates.Y(; arg_gen(x, fieldnames(Y))...)
Py(x::IR.Z) = pyjaqcd.Z(; arg_gen(x, fieldnames(IR.Z))...)
Py(x::Z) = pygates.Z(; arg_gen(x, fieldnames(Z))...)
Py(x::IR.S) = pyjaqcd.S(; arg_gen(x, fieldnames(IR.S))...)
Py(x::S) = pygates.S(; arg_gen(x, fieldnames(S))...)
Py(x::IR.Si) = pyjaqcd.Si(; arg_gen(x, fieldnames(IR.Si))...)
Py(x::Si) = pygates.Si(; arg_gen(x, fieldnames(Si))...)
Py(x::IR.T) = pyjaqcd.T(; arg_gen(x, fieldnames(IR.T))...)
Py(x::T) = pygates.T(; arg_gen(x, fieldnames(T))...)
Py(x::IR.Ti) = pyjaqcd.Ti(; arg_gen(x, fieldnames(IR.Ti))...)
Py(x::Ti) = pygates.Ti(; arg_gen(x, fieldnames(Ti))...)
Py(x::IR.V) = pyjaqcd.V(; arg_gen(x, fieldnames(IR.V))...)
Py(x::V) = pygates.V(; arg_gen(x, fieldnames(V))...)
Py(x::IR.Vi) = pyjaqcd.Vi(; arg_gen(x, fieldnames(IR.Vi))...)
Py(x::Vi) = pygates.Vi(; arg_gen(x, fieldnames(Vi))...)
Py(x::IR.CNot) = pyjaqcd.CNot(; arg_gen(x, fieldnames(IR.CNot))...)
Py(x::CNot) = pygates.CNot(; arg_gen(x, fieldnames(CNot))...)
Py(x::IR.Swap) = pyjaqcd.Swap(; arg_gen(x, fieldnames(IR.Swap))...)
Py(x::Swap) = pygates.Swap(; arg_gen(x, fieldnames(Swap))...)
Py(x::IR.ISwap) = pyjaqcd.ISwap(; arg_gen(x, fieldnames(IR.ISwap))...)
Py(x::ISwap) = pygates.ISwap(; arg_gen(x, fieldnames(ISwap))...)
Py(x::IR.CV) = pyjaqcd.CV(; arg_gen(x, fieldnames(IR.CV))...)
Py(x::CV) = pygates.CV(; arg_gen(x, fieldnames(CV))...)
Py(x::IR.CY) = pyjaqcd.CY(; arg_gen(x, fieldnames(IR.CY))...)
Py(x::CY) = pygates.CY(; arg_gen(x, fieldnames(CY))...)
Py(x::IR.CZ) = pyjaqcd.CZ(; arg_gen(x, fieldnames(IR.CZ))...)
Py(x::CZ) = pygates.CZ(; arg_gen(x, fieldnames(CZ))...)
Py(x::IR.ECR) = pyjaqcd.ECR(; arg_gen(x, fieldnames(IR.ECR))...)
Py(x::ECR) = pygates.ECR(; arg_gen(x, fieldnames(ECR))...)
Py(x::IR.CCNot) = pyjaqcd.CCNot(; arg_gen(x, fieldnames(IR.CCNot))...)
Py(x::CCNot) = pygates.CCNot(; arg_gen(x, fieldnames(CCNot))...)
Py(x::IR.CSwap) = pyjaqcd.CSwap(; arg_gen(x, fieldnames(IR.CSwap))...)
Py(x::CSwap) = pygates.CSwap(; arg_gen(x, fieldnames(CSwap))...)
Py(x::IR.Unitary) = pyjaqcd.Unitary(; arg_gen(x, fieldnames(IR.Unitary))...)
Py(x::Unitary) = pygates.Unitary(; arg_gen(x, fieldnames(Unitary))...)
Py(x::IR.Rx) = pyjaqcd.Rx(; arg_gen(x, fieldnames(IR.Rx))...)
Py(x::Rx) = pygates.Rx(; arg_gen(x, fieldnames(Rx))...)
Py(x::IR.Ry) = pyjaqcd.Ry(; arg_gen(x, fieldnames(IR.Ry))...)
Py(x::Ry) = pygates.Ry(; arg_gen(x, fieldnames(Ry))...)
Py(x::IR.Rz) = pyjaqcd.Rz(; arg_gen(x, fieldnames(IR.Rz))...)
Py(x::Rz) = pygates.Rz(; arg_gen(x, fieldnames(Rz))...)
Py(x::IR.PhaseShift) = pyjaqcd.PhaseShift(; arg_gen(x, fieldnames(IR.PhaseShift))...)
Py(x::PhaseShift) = pygates.PhaseShift(; arg_gen(x, fieldnames(PhaseShift))...)
Py(x::IR.PSwap) = pyjaqcd.PSwap(; arg_gen(x, fieldnames(IR.PSwap))...)
Py(x::PSwap) = pygates.PSwap(; arg_gen(x, fieldnames(PSwap))...)
Py(x::IR.XY) = pyjaqcd.XY(; arg_gen(x, fieldnames(IR.XY))...)
Py(x::XY) = pygates.XY(; arg_gen(x, fieldnames(XY))...)
Py(x::IR.CPhaseShift) = pyjaqcd.CPhaseShift(; arg_gen(x, fieldnames(IR.CPhaseShift))...)
Py(x::CPhaseShift) = pygates.CPhaseShift(; arg_gen(x, fieldnames(CPhaseShift))...)
Py(x::IR.CPhaseShift00) = pyjaqcd.CPhaseShift00(; arg_gen(x, fieldnames(IR.CPhaseShift00))...)
Py(x::CPhaseShift00) = pygates.CPhaseShift00(; arg_gen(x, fieldnames(CPhaseShift00))...)
Py(x::IR.CPhaseShift01) = pyjaqcd.CPhaseShift01(; arg_gen(x, fieldnames(IR.CPhaseShift01))...)
Py(x::CPhaseShift01) = pygates.CPhaseShift01(; arg_gen(x, fieldnames(CPhaseShift01))...)
Py(x::IR.CPhaseShift10) = pyjaqcd.CPhaseShift10(; arg_gen(x, fieldnames(IR.CPhaseShift10))...)
Py(x::CPhaseShift10) = pygates.CPhaseShift10(; arg_gen(x, fieldnames(CPhaseShift10))...)
Py(x::IR.XX) = pyjaqcd.XX(; arg_gen(x, fieldnames(IR.XX))...)
Py(x::XX) = pygates.XX(; arg_gen(x, fieldnames(XX))...)
Py(x::IR.YY) = pyjaqcd.YY(; arg_gen(x, fieldnames(IR.YY))...)
Py(x::YY) = pygates.YY(; arg_gen(x, fieldnames(YY))...)
Py(x::IR.ZZ) = pyjaqcd.ZZ(; arg_gen(x, fieldnames(IR.ZZ))...)
Py(x::ZZ) = pygates.ZZ(; arg_gen(x, fieldnames(ZZ))...)
Py(x::IR.GPi) = pyjaqcd.GPi(; arg_gen(x, fieldnames(IR.GPi))...)
Py(x::GPi) = pygates.GPi(; arg_gen(x, fieldnames(GPi))...)
Py(x::IR.GPi2) = pyjaqcd.GPi2(; arg_gen(x, fieldnames(IR.GPi2))...)
Py(x::GPi2) = pygates.GPi2(; arg_gen(x, fieldnames(GPi2))...)
function Py(x::IR.MS)
    fns = fieldnames(IR.MS)
    args = Dict(arg_gen(x, fns)...)
    mapped_args = Dict(zip([:angle_1, :angle_2, :angle_3], args[:angle]))
    return pyjaqcd.MS(; mapped_args...)
end
function Py(x::MS)
    fns = fieldnames(MS)
    args = Dict(arg_gen(x, fns)...)
    mapped_args = Dict(zip([:angle_1, :angle_2, :angle_3], args[:angle]))
    return pygates.MS(; mapped_args...)
end
