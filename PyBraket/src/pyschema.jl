module PySchema

using PythonCall, Braket, Braket.IR
import Braket: DwaveTiming, GateModelQpuParadigmProperties, ResultTypeValue, OqcDeviceCapabilities, GateFidelity2Q, OneQubitProperties, AdditionalMetadata, DwaveAdvantageDeviceLevelParameters, IonqDeviceCapabilities, TwoQubitProperties, IonqDeviceParameters, NativeQuilMetadata, QueraDeviceCapabilities, ExecutionDay, StandardizedGateModelQpuDeviceProperties, XanaduDeviceCapabilities, DeviceExecutionWindow, DwaveDeviceParameters, CoherenceTime, DwaveMetadata, Frame, DeviceCost, Dwave2000QDeviceLevelParameters, FidelityType, QueraMetadata, OqcProviderProperties, DeviceServiceProperties, XanaduDeviceParameters, BlackbirdProgram, Geometry, Fidelity1Q, AnnealingTaskResult, AnalogHamiltonianSimulationShotResult, RigettiDeviceCapabilities, DwaveProviderProperties, DeviceActionProperties, DwaveProviderLevelParameters, JaqcdDeviceActionProperties, Direction, PulseDeviceActionProperties, BlackbirdDeviceActionProperties, PerformanceLattice, PerformanceRydberg, DeviceActionType, IonqProviderProperties, PersistedJobDataFormat, PhotonicModelTaskResult, DeviceDocumentation, XanaduProviderProperties, QubitDirection, ContinuousVariableQpuParadigmProperties, PulseFunctionArgument, DwaveAdvantageDeviceParameters, RigettiDeviceParameters, AnalogHamiltonianSimulationTaskResult, TaskMetadata, GateModelSimulatorParadigmProperties, GateModelTaskResult, RigettiProviderProperties, OqcDeviceParameters, DeviceConnectivity, PulseFunction, Rydberg, PerformanceRydbergGlobal, RydbergGlobal, GateModelSimulatorDeviceCapabilities, XanaduMetadata, GateModelParameters, Performance, GateModelSimulatorDeviceParameters, AnalogHamiltonianSimulationShotMeasurement, OqcMetadata, QueraAhsParadigmProperties, Lattice, PersistedJobData, DwaveDeviceCapabilities, ProblemType, RigettiMetadata, SimulatorMetadata, Area, Problem, ResultType, PostProcessingType, ResultFormat, Dwave2000QDeviceParameters, AnalogHamiltonianSimulationShotMetadata, braketSchemaHeader, OpenQasmProgram, Port, OpenQASMDeviceActionProperties, AbstractProgram
import Braket.IR: Z, Sample, CPhaseShift01, PhaseDamping, Rz, GeneralizedAmplitudeDamping, XX, ZZ, PhaseFlip, Vi, Depolarizing, Variance, TwoQubitDepolarizing, DensityMatrix, CPhaseShift00, ECR, CompilerDirective, CCNot, Unitary, BitFlip, Y, Swap, CZ, EndVerbatimBox, Program, CNot, AdjointGradient, CSwap, Ry, I, Si, AmplitudeDamping, StateVector, ISwap, H, XY, YY, T, TwoQubitDephasing, X, Ti, CV, StartVerbatimBox, PauliChannel, PSwap, Expectation, Probability, PhaseShift, V, CPhaseShift, S, Rx, Kraus, Amplitude, CPhaseShift10, MultiQubitPauliChannel, CY, Setup, Hamiltonian, ShiftingField, AtomArrangement, TimeSeries, PhysicalField, AHSProgram, DrivingField, AbstractProgramResult, IRObservable

const instructions = PythonCall.pynew()
const dwave_metadata_v1 = PythonCall.pynew()
const gate_model_qpu_paradigm_properties_v1 = PythonCall.pynew()
const gate_model_task_result_v1 = PythonCall.pynew()
const results = PythonCall.pynew()
const oqc_device_capabilities_v1 = PythonCall.pynew()
const standardized_gate_model_qpu_device_properties_v1 = PythonCall.pynew()
const additional_metadata = PythonCall.pynew()
const dwave_advantage_device_level_parameters_v1 = PythonCall.pynew()
const ionq_device_capabilities_v1 = PythonCall.pynew()
const ionq_device_parameters_v1 = PythonCall.pynew()
const rigetti_metadata_v1 = PythonCall.pynew()
const quera_device_capabilities_v1 = PythonCall.pynew()
const device_execution_window = PythonCall.pynew()
const xanadu_device_capabilities_v1 = PythonCall.pynew()
const shifting_field = PythonCall.pynew()
const dwave_device_parameters_v1 = PythonCall.pynew()
const frame_v1 = PythonCall.pynew()
const device_service_properties_v1 = PythonCall.pynew()
const dwave_2000Q_device_level_parameters_v1 = PythonCall.pynew()
const quera_metadata_v1 = PythonCall.pynew()
const oqc_provider_properties_v1 = PythonCall.pynew()
const xanadu_device_parameters_v1 = PythonCall.pynew()
const program_v1 = PythonCall.pynew()
const quera_ahs_paradigm_properties_v1 = PythonCall.pynew()
const annealing_task_result_v1 = PythonCall.pynew()
const analog_hamiltonian_simulation_task_result_v1 = PythonCall.pynew()
const rigetti_device_capabilities_v1 = PythonCall.pynew()
const atom_arrangement = PythonCall.pynew()
const dwave_provider_properties_v1 = PythonCall.pynew()
const device_action_properties = PythonCall.pynew()
const dwave_provider_level_parameters_v1 = PythonCall.pynew()
const driving_field = PythonCall.pynew()
const jaqcd_device_action_properties = PythonCall.pynew()
const port_v1 = PythonCall.pynew()
const pulse_device_action_properties_v1 = PythonCall.pynew()
const blackbird_device_action_properties = PythonCall.pynew()
const ionq_provider_properties_v1 = PythonCall.pynew()
const persisted_job_data_v1 = PythonCall.pynew()
const photonic_model_task_result_v1 = PythonCall.pynew()
const time_series = PythonCall.pynew()
const xanadu_provider_properties_v1 = PythonCall.pynew()
const continuous_variable_qpu_paradigm_properties_v1 = PythonCall.pynew()
const pulse_function_v1 = PythonCall.pynew()
const dwave_advantage_device_parameters_v1 = PythonCall.pynew()
const rigetti_device_parameters_v1 = PythonCall.pynew()
const task_metadata_v1 = PythonCall.pynew()
const gate_model_simulator_paradigm_properties_v1 = PythonCall.pynew()
const rigetti_provider_properties_v1 = PythonCall.pynew()
const oqc_device_parameters_v1 = PythonCall.pynew()
const device_connectivity = PythonCall.pynew()
const physical_field = PythonCall.pynew()
const gate_model_simulator_device_capabilities_v1 = PythonCall.pynew()
const xanadu_metadata_v1 = PythonCall.pynew()
const gate_model_parameters_v1 = PythonCall.pynew()
const gate_model_simulator_device_parameters_v1 = PythonCall.pynew()
const oqc_metadata_v1 = PythonCall.pynew()
const dwave_device_capabilities_v1 = PythonCall.pynew()
const problem_v1 = PythonCall.pynew()
const simulator_metadata_v1 = PythonCall.pynew()
const result_type = PythonCall.pynew()
const dwave_2000Q_device_parameters_v1 = PythonCall.pynew()
const hamiltonian = PythonCall.pynew()
const shared_models = PythonCall.pynew()
const schema_header = PythonCall.pynew()
const openqasm_device_action_properties = PythonCall.pynew()

function union_convert(::Type{IRObservable}, x)
    PythonCall.pyisinstance(x, PythonCall.pybuiltins.str) && return pyconvert(String, x)
    x_vec = Union{String, Vector{Vector{Vector{Float64}}}}[PythonCall.pyisinstance(x_, PythonCall.pybuiltins.str) ? pyconvert(String, x_) : pyconvert(Vector{Vector{Vector{Float64}}}, x_) for x_ in x] 
    return x_vec
end

function union_convert(union_type, x)
    union_ts = union_type isa Union ? Type[] : [union_type]
    union_t = union_type
    while union_t isa Union
        union_t.a != Nothing && push!(union_ts, union_t.a)
        !(union_t.b isa Union) && push!(union_ts, union_t.b)
        union_t = union_t.b
    end
    arg = nothing
    for t_ in union_ts
        try
            if pyisinstance(x, PythonCall.pybuiltins.list) && t_ <: Vector
                return [union_convert(Union{eltype(t_)}, attr_) for attr_ in x]
            elseif pyisinstance(x, pybuiltins.str) && t_ <: Integer
                return tryparse(t_, pyconvert(String, x))
            elseif t_ == ResultTypeValue
                if pyhasattr(x, "value")
                    typ = jl_convert(AbstractProgramResult, pygetattr(x, "type"))
                    val = union_convert(Union{Dict{String, ComplexF64}, Float64, Vector}, pygetattr(x, "value"))
                    return PythonCall.pyconvert_return(ResultTypeValue(typ, val))
                else
                    rt = jl_convert(AbstractProgramResult, x)
                    return PythonCall.pyconvert_return(ResultTypeValue(rt, 0.0))
                end
            else
                return pyconvert(t_, x)
            end
        catch e
        end
    end
    arg isa Vector{Nothing} && (arg = nothing)
    return arg
end

function jl_convert_attr(n, t, attr)
    if !(t isa Union)
        if pyisinstance(attr, PythonCall.pybuiltins.list)
            if eltype(t) isa Union
                return [union_convert(eltype(t), attr_) for attr_ in attr]
            else
                return [pyconvert(eltype(t), attr_) for attr_ in attr]
            end
        else
            return pyconvert(t, attr)
        end
    else
        PythonCall.pyisnone(attr) && return nothing
        return union_convert(t, attr)
    end
end

function jl_convert(::Type{T}, x::Py) where {T}
    fts = fieldtypes(T)
    fns = fieldnames(T)
    args = Any[]
    for (n, t) in zip(fns, fts)
        attr = pygetattr(x, string(n))
        arg = jl_convert_attr(n, t, attr)
        push!(args, arg)
    end
    PythonCall.pyconvert_return(T(args...))
end

function jl_convert(::Type{T}, x::Py) where {T<:AbstractIR}
    fts = fieldtypes(T)[1:end-1]
    fns = fieldnames(T)[1:end-1]
    args = Any[]
    for (n, t) in zip(fns, fts)
        attr = pygetattr(x, string(n))
        arg = jl_convert_attr(n, t, attr)
        push!(args, arg)
    end
    PythonCall.pyconvert_return(T(args..., pyconvert(String, pygetattr(x, "type"))))
end
function jl_convert(::Type{AbstractProgram}, x::Py)
    T = Braket.lookup_type(pyconvert(braketSchemaHeader, pygetattr(x, "braketSchemaHeader")))
    return PythonCall.pyconvert_return(pyconvert(T, x))
end
function jl_convert(::Type{AbstractProgramResult}, x::Py)
    T_ = pyconvert(String, x.type)
    T = Dict("adjoint_gradient"=>AdjointGradient, "expectation"=>Expectation, "variance"=>Variance, "statevector"=>StateVector, "densitymatrix"=>DensityMatrix, "sample"=>Sample, "amplitude"=>Amplitude, "probability"=>Probability)
    return PythonCall.pyconvert_return(pyconvert(T[T_], x))
end
#=for (irT, pyT) in ((:(Braket.IR.Expectation), :(pyjaqcd.Expectation)),
                   (:(Braket.IR.Variance), :(pyjaqcd.Variance)),
                   (:(Braket.IR.Sample), :(pyjaqcd.Sample)),
                   (:(Braket.IR.Amplitude), :(pyjaqcd.Amplitude)),
                   (:(Braket.IR.StateVector), :(pyjaqcd.StateVector)),
                   (:(Braket.IR.Probability), :(pyjaqcd.Probability)),
                   (:(Braket.IR.DensityMatrix), :(pyjaqcd.DensityMatrix)),
                   (:(Braket.IR.AdjointGradient), :(pyjaqcd.AdjointGradient)))
    @eval begin
        Py(o::$irT) = $pyT(;arg_gen(o, fieldnames($irT))...) 
    end
end
=#

function __init__()
    PythonCall.pycopy!(instructions, pyimport("braket.ir.jaqcd.instructions"))
    PythonCall.pycopy!(dwave_metadata_v1, pyimport("braket.task_result.dwave_metadata_v1"))
    PythonCall.pycopy!(gate_model_qpu_paradigm_properties_v1, pyimport("braket.device_schema.gate_model_qpu_paradigm_properties_v1"))
    PythonCall.pycopy!(gate_model_task_result_v1, pyimport("braket.task_result.gate_model_task_result_v1"))
    PythonCall.pycopy!(results, pyimport("braket.ir.jaqcd.results"))
    PythonCall.pycopy!(oqc_device_capabilities_v1, pyimport("braket.device_schema.oqc.oqc_device_capabilities_v1"))
    PythonCall.pycopy!(standardized_gate_model_qpu_device_properties_v1, pyimport("braket.device_schema.standardized_gate_model_qpu_device_properties_v1"))
    PythonCall.pycopy!(additional_metadata, pyimport("braket.task_result.additional_metadata"))
    PythonCall.pycopy!(dwave_advantage_device_level_parameters_v1, pyimport("braket.device_schema.dwave.dwave_advantage_device_level_parameters_v1"))
    PythonCall.pycopy!(ionq_device_capabilities_v1, pyimport("braket.device_schema.ionq.ionq_device_capabilities_v1"))
    PythonCall.pycopy!(ionq_device_parameters_v1, pyimport("braket.device_schema.ionq.ionq_device_parameters_v1"))
    PythonCall.pycopy!(rigetti_metadata_v1, pyimport("braket.task_result.rigetti_metadata_v1"))
    PythonCall.pycopy!(quera_device_capabilities_v1, pyimport("braket.device_schema.quera.quera_device_capabilities_v1"))
    PythonCall.pycopy!(device_execution_window, pyimport("braket.device_schema.device_execution_window"))
    PythonCall.pycopy!(xanadu_device_capabilities_v1, pyimport("braket.device_schema.xanadu.xanadu_device_capabilities_v1"))
    PythonCall.pycopy!(shifting_field, pyimport("braket.ir.ahs.shifting_field"))
    PythonCall.pycopy!(dwave_device_parameters_v1, pyimport("braket.device_schema.dwave.dwave_device_parameters_v1"))
    PythonCall.pycopy!(frame_v1, pyimport("braket.device_schema.pulse.frame_v1"))
    PythonCall.pycopy!(device_service_properties_v1, pyimport("braket.device_schema.device_service_properties_v1"))
    PythonCall.pycopy!(dwave_2000Q_device_level_parameters_v1, pyimport("braket.device_schema.dwave.dwave_2000Q_device_level_parameters_v1"))
    PythonCall.pycopy!(quera_metadata_v1, pyimport("braket.task_result.quera_metadata_v1"))
    PythonCall.pycopy!(oqc_provider_properties_v1, pyimport("braket.device_schema.oqc.oqc_provider_properties_v1"))
    PythonCall.pycopy!(xanadu_device_parameters_v1, pyimport("braket.device_schema.xanadu.xanadu_device_parameters_v1"))
    PythonCall.pycopy!(program_v1, pyimport("braket.ir.blackbird.program_v1"))
    PythonCall.pycopy!(quera_ahs_paradigm_properties_v1, pyimport("braket.device_schema.quera.quera_ahs_paradigm_properties_v1"))
    PythonCall.pycopy!(annealing_task_result_v1, pyimport("braket.task_result.annealing_task_result_v1"))
    PythonCall.pycopy!(analog_hamiltonian_simulation_task_result_v1, pyimport("braket.task_result.analog_hamiltonian_simulation_task_result_v1"))
    PythonCall.pycopy!(rigetti_device_capabilities_v1, pyimport("braket.device_schema.rigetti.rigetti_device_capabilities_v1"))
    PythonCall.pycopy!(atom_arrangement, pyimport("braket.ir.ahs.atom_arrangement"))
    PythonCall.pycopy!(dwave_provider_properties_v1, pyimport("braket.device_schema.dwave.dwave_provider_properties_v1"))
    PythonCall.pycopy!(device_action_properties, pyimport("braket.device_schema.device_action_properties"))
    PythonCall.pycopy!(dwave_provider_level_parameters_v1, pyimport("braket.device_schema.dwave.dwave_provider_level_parameters_v1"))
    PythonCall.pycopy!(driving_field, pyimport("braket.ir.ahs.driving_field"))
    PythonCall.pycopy!(jaqcd_device_action_properties, pyimport("braket.device_schema.jaqcd_device_action_properties"))
    PythonCall.pycopy!(port_v1, pyimport("braket.device_schema.pulse.port_v1"))
    PythonCall.pycopy!(pulse_device_action_properties_v1, pyimport("braket.device_schema.pulse.pulse_device_action_properties_v1"))
    PythonCall.pycopy!(blackbird_device_action_properties, pyimport("braket.device_schema.blackbird_device_action_properties"))
    PythonCall.pycopy!(ionq_provider_properties_v1, pyimport("braket.device_schema.ionq.ionq_provider_properties_v1"))
    PythonCall.pycopy!(persisted_job_data_v1, pyimport("braket.jobs_data.persisted_job_data_v1"))
    PythonCall.pycopy!(photonic_model_task_result_v1, pyimport("braket.task_result.photonic_model_task_result_v1"))
    PythonCall.pycopy!(time_series, pyimport("braket.ir.ahs.time_series"))
    PythonCall.pycopy!(xanadu_provider_properties_v1, pyimport("braket.device_schema.xanadu.xanadu_provider_properties_v1"))
    PythonCall.pycopy!(continuous_variable_qpu_paradigm_properties_v1, pyimport("braket.device_schema.continuous_variable_qpu_paradigm_properties_v1"))
    PythonCall.pycopy!(pulse_function_v1, pyimport("braket.device_schema.pulse.pulse_function_v1"))
    PythonCall.pycopy!(dwave_advantage_device_parameters_v1, pyimport("braket.device_schema.dwave.dwave_advantage_device_parameters_v1"))
    PythonCall.pycopy!(rigetti_device_parameters_v1, pyimport("braket.device_schema.rigetti.rigetti_device_parameters_v1"))
    PythonCall.pycopy!(program_v1, pyimport("braket.ir.jaqcd.program_v1"))
    PythonCall.pycopy!(program_v1, pyimport("braket.ir.ahs.program_v1"))
    PythonCall.pycopy!(task_metadata_v1, pyimport("braket.task_result.task_metadata_v1"))
    PythonCall.pycopy!(gate_model_simulator_paradigm_properties_v1, pyimport("braket.device_schema.simulators.gate_model_simulator_paradigm_properties_v1"))
    PythonCall.pycopy!(rigetti_provider_properties_v1, pyimport("braket.device_schema.rigetti.rigetti_provider_properties_v1"))
    PythonCall.pycopy!(oqc_device_parameters_v1, pyimport("braket.device_schema.oqc.oqc_device_parameters_v1"))
    PythonCall.pycopy!(device_connectivity, pyimport("braket.device_schema.device_connectivity"))
    PythonCall.pycopy!(physical_field, pyimport("braket.ir.ahs.physical_field"))
    PythonCall.pycopy!(gate_model_simulator_device_capabilities_v1, pyimport("braket.device_schema.simulators.gate_model_simulator_device_capabilities_v1"))
    PythonCall.pycopy!(xanadu_metadata_v1, pyimport("braket.task_result.xanadu_metadata_v1"))
    PythonCall.pycopy!(gate_model_parameters_v1, pyimport("braket.device_schema.gate_model_parameters_v1"))
    PythonCall.pycopy!(gate_model_simulator_device_parameters_v1, pyimport("braket.device_schema.simulators.gate_model_simulator_device_parameters_v1"))
    PythonCall.pycopy!(oqc_metadata_v1, pyimport("braket.task_result.oqc_metadata_v1"))
    PythonCall.pycopy!(dwave_device_capabilities_v1, pyimport("braket.device_schema.dwave.dwave_device_capabilities_v1"))
    PythonCall.pycopy!(problem_v1, pyimport("braket.ir.annealing.problem_v1"))
    PythonCall.pycopy!(simulator_metadata_v1, pyimport("braket.task_result.simulator_metadata_v1"))
    PythonCall.pycopy!(result_type, pyimport("braket.device_schema.result_type"))
    PythonCall.pycopy!(dwave_2000Q_device_parameters_v1, pyimport("braket.device_schema.dwave.dwave_2000Q_device_parameters_v1"))
    PythonCall.pycopy!(hamiltonian, pyimport("braket.ir.ahs.hamiltonian"))
    PythonCall.pycopy!(shared_models, pyimport("braket.ir.jaqcd.shared_models"))
    PythonCall.pycopy!(schema_header, pyimport("braket.schema_common.schema_header"))
    PythonCall.pycopy!(program_v1, pyimport("braket.ir.openqasm.program_v1"))
    PythonCall.pycopy!(openqasm_device_action_properties, pyimport("braket.device_schema.openqasm_device_action_properties"))

    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Z", Z, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.dwave_metadata_v1:DwaveTiming", DwaveTiming, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Si", Si, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.gate_model_qpu_paradigm_properties_v1:GateModelQpuParadigmProperties", GateModelQpuParadigmProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.gate_model_task_result_v1:ResultTypeValue", ResultTypeValue, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Sample", Sample, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.oqc.oqc_device_capabilities_v1:OqcDeviceCapabilities", OqcDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:GateFidelity2Q", GateFidelity2Q, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:OneQubitProperties", OneQubitProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.additional_metadata:AdditionalMetadata", AdditionalMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_advantage_device_level_parameters_v1:DwaveAdvantageDeviceLevelParameters", DwaveAdvantageDeviceLevelParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CPhaseShift01", CPhaseShift01, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.ionq.ionq_device_capabilities_v1:IonqDeviceCapabilities", IonqDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:PSwap", PSwap, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:TwoQubitProperties", TwoQubitProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.ionq.ionq_device_parameters_v1:IonqDeviceParameters", IonqDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.rigetti_metadata_v1:NativeQuilMetadata", NativeQuilMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:AmplitudeDamping", AmplitudeDamping, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_device_capabilities_v1:QueraDeviceCapabilities", QueraDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_execution_window:ExecutionDay", ExecutionDay, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Expectation", Expectation, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:StandardizedGateModelQpuDeviceProperties", StandardizedGateModelQpuDeviceProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:BitFlip", BitFlip, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.xanadu.xanadu_device_capabilities_v1:XanaduDeviceCapabilities", XanaduDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.shifting_field:ShiftingField", ShiftingField, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:PhaseDamping", PhaseDamping, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Rz", Rz, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_execution_window:DeviceExecutionWindow", DeviceExecutionWindow, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Y", Y, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_device_parameters_v1:DwaveDeviceParameters", DwaveDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:CoherenceTime", CoherenceTime, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.dwave_metadata_v1:DwaveMetadata", DwaveMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.frame_v1:Frame", Frame, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_service_properties_v1:DeviceCost", DeviceCost, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_2000Q_device_level_parameters_v1:Dwave2000QDeviceLevelParameters", Dwave2000QDeviceLevelParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:FidelityType", FidelityType, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:GeneralizedAmplitudeDamping", GeneralizedAmplitudeDamping, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Probability", Probability, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.quera_metadata_v1:QueraMetadata", QueraMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.oqc.oqc_provider_properties_v1:OqcProviderProperties", OqcProviderProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_service_properties_v1:DeviceServiceProperties", DeviceServiceProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:PhaseShift", PhaseShift, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.xanadu.xanadu_device_parameters_v1:XanaduDeviceParameters", XanaduDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:V", V, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.blackbird.program_v1:BlackbirdProgram", BlackbirdProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:XX", XX, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:Geometry", Geometry, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:StateVector", StateVector, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:Fidelity1Q", Fidelity1Q, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:ZZ", ZZ, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.annealing_task_result_v1:AnnealingTaskResult", AnnealingTaskResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Swap", Swap, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.analog_hamiltonian_simulation_task_result_v1:AnalogHamiltonianSimulationShotResult", AnalogHamiltonianSimulationShotResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.rigetti.rigetti_device_capabilities_v1:RigettiDeviceCapabilities", RigettiDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.atom_arrangement:AtomArrangement", AtomArrangement, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:ISwap", ISwap, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_provider_properties_v1:DwaveProviderProperties", DwaveProviderProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_action_properties:DeviceActionProperties", DeviceActionProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_provider_level_parameters_v1:DwaveProviderLevelParameters", DwaveProviderLevelParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.driving_field:DrivingField", DrivingField, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:PhaseFlip", PhaseFlip, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Vi", Vi, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:H", H, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.jaqcd_device_action_properties:JaqcdDeviceActionProperties", JaqcdDeviceActionProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.port_v1:Direction", Direction, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.pulse_device_action_properties_v1:PulseDeviceActionProperties", PulseDeviceActionProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:XY", XY, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CPhaseShift", CPhaseShift, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.blackbird_device_action_properties:BlackbirdDeviceActionProperties", BlackbirdDeviceActionProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:PerformanceLattice", PerformanceLattice, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:PerformanceRydberg", PerformanceRydberg, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_action_properties:DeviceActionType", DeviceActionType, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.ionq.ionq_provider_properties_v1:IonqProviderProperties", IonqProviderProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.jobs_data.persisted_job_data_v1:PersistedJobDataFormat", PersistedJobDataFormat, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.photonic_model_task_result_v1:PhotonicModelTaskResult", PhotonicModelTaskResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:S", S, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Depolarizing", Depolarizing, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CZ", CZ, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:EndVerbatimBox", EndVerbatimBox, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.time_series:TimeSeries", TimeSeries, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:YY", YY, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_service_properties_v1:DeviceDocumentation", DeviceDocumentation, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.xanadu.xanadu_provider_properties_v1:XanaduProviderProperties", XanaduProviderProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.standardized_gate_model_qpu_device_properties_v1:QubitDirection", QubitDirection, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.continuous_variable_qpu_paradigm_properties_v1:ContinuousVariableQpuParadigmProperties", ContinuousVariableQpuParadigmProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Rx", Rx, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Variance", Variance, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.pulse_function_v1:PulseFunctionArgument", PulseFunctionArgument, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_advantage_device_parameters_v1:DwaveAdvantageDeviceParameters", DwaveAdvantageDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:T", T, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.rigetti.rigetti_device_parameters_v1:RigettiDeviceParameters", RigettiDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.program_v1:Program", Program, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.analog_hamiltonian_simulation_task_result_v1:AnalogHamiltonianSimulationTaskResult", AnalogHamiltonianSimulationTaskResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:TwoQubitDepolarizing", TwoQubitDepolarizing, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CNot", CNot, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.program_v1:AHSProgram", AHSProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.task_metadata_v1:TaskMetadata", TaskMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.simulators.gate_model_simulator_paradigm_properties_v1:GateModelSimulatorParadigmProperties", GateModelSimulatorParadigmProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.gate_model_task_result_v1:GateModelTaskResult", GateModelTaskResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.program_v1:Setup", Setup, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Kraus", Kraus, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:DensityMatrix", DensityMatrix, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.rigetti.rigetti_provider_properties_v1:RigettiProviderProperties", RigettiProviderProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.oqc.oqc_device_parameters_v1:OqcDeviceParameters", OqcDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.device_connectivity:DeviceConnectivity", DeviceConnectivity, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.pulse_function_v1:PulseFunction", PulseFunction, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:TwoQubitDephasing", TwoQubitDephasing, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.physical_field:PhysicalField", PhysicalField, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:Rydberg", Rydberg, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Amplitude", Amplitude, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:X", X, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:PerformanceRydbergGlobal", PerformanceRydbergGlobal, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CPhaseShift10", CPhaseShift10, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CPhaseShift00", CPhaseShift00, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:RydbergGlobal", RydbergGlobal, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:MultiQubitPauliChannel", MultiQubitPauliChannel, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.simulators.gate_model_simulator_device_capabilities_v1:GateModelSimulatorDeviceCapabilities", GateModelSimulatorDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.xanadu_metadata_v1:XanaduMetadata", XanaduMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.gate_model_parameters_v1:GateModelParameters", GateModelParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Ti", Ti, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CV", CV, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:StartVerbatimBox", StartVerbatimBox, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:Performance", Performance, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.simulators.gate_model_simulator_device_parameters_v1:GateModelSimulatorDeviceParameters", GateModelSimulatorDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.analog_hamiltonian_simulation_task_result_v1:AnalogHamiltonianSimulationShotMeasurement", AnalogHamiltonianSimulationShotMeasurement, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.oqc_metadata_v1:OqcMetadata", OqcMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:QueraAhsParadigmProperties", QueraAhsParadigmProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:Lattice", Lattice, jl_convert)
    PythonCall.pyconvert_add_rule("braket.jobs_data.persisted_job_data_v1:PersistedJobData", PersistedJobData, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_device_capabilities_v1:DwaveDeviceCapabilities", DwaveDeviceCapabilities, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.annealing.problem_v1:ProblemType", ProblemType, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:ECR", ECR, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.rigetti_metadata_v1:RigettiMetadata", RigettiMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:AdjointGradient", AdjointGradient, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.simulator_metadata_v1:SimulatorMetadata", SimulatorMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.quera.quera_ahs_paradigm_properties_v1:Area", Area, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.annealing.problem_v1:Problem", Problem, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.result_type:ResultType", ResultType, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_provider_level_parameters_v1:PostProcessingType", PostProcessingType, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_provider_level_parameters_v1:ResultFormat", ResultFormat, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.dwave.dwave_2000Q_device_parameters_v1:Dwave2000QDeviceParameters", Dwave2000QDeviceParameters, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CSwap", CSwap, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.hamiltonian:Hamiltonian", Hamiltonian, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.shared_models:CompilerDirective", CompilerDirective, jl_convert)
    PythonCall.pyconvert_add_rule("braket.task_result.analog_hamiltonian_simulation_task_result_v1:AnalogHamiltonianSimulationShotMetadata", AnalogHamiltonianSimulationShotMetadata, jl_convert)
    PythonCall.pyconvert_add_rule("braket.schema_common.schema_header:BraketSchemaHeader", braketSchemaHeader, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.openqasm.program_v1:OpenQasmProgram", OpenQasmProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Ry", Ry, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CY", CY, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:CCNot", CCNot, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:PauliChannel", PauliChannel, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.pulse.port_v1:Port", Port, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:Unitary", Unitary, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.instructions:I", I, jl_convert)
    PythonCall.pyconvert_add_rule("braket.device_schema.openqasm_device_action_properties:OpenQASMDeviceActionProperties", OpenQASMDeviceActionProperties, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.program_v1:Program", Program, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.program_v1:Program", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.program_v1:Program", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.openqasm.program_v1:OpenQasmProgram", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.openqasm.program_v1:Program", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.blackbird.program_v1:BlackbirdProgram", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.blackbird.program_v1:Program", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.program_v1:AHSProgram", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.ahs.program_v1:Program", AbstractProgram, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Amplitude", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Expectation", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Probability", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Sample", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:StateVector", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:DensityMatrix", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:Variance", AbstractProgramResult, jl_convert)
    PythonCall.pyconvert_add_rule("braket.ir.jaqcd.results:AdjointGradient", AbstractProgramResult, jl_convert)

end

end #module
