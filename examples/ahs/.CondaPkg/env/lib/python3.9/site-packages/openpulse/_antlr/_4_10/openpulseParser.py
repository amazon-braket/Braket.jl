# Generated from openpulseParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,112,833,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,5,0,134,8,0,10,0,12,0,137,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
        161,8,1,1,2,1,2,3,2,165,8,2,1,2,1,2,3,2,169,8,2,1,2,1,2,3,2,173,
        8,2,1,2,1,2,3,2,177,8,2,1,2,1,2,3,2,181,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,3,2,194,8,2,1,3,3,3,197,8,3,1,3,5,3,200,
        8,3,10,3,12,3,203,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,5,5,213,8,
        5,10,5,12,5,216,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,3,5,246,8,5,3,5,248,8,5,1,6,1,6,3,6,252,8,6,1,7,1,7,5,7,256,
        8,7,10,7,12,7,259,9,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,3,9,268,8,9,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,3,15,297,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,
        16,308,8,16,1,17,1,17,1,17,3,17,313,8,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,19,1,19,3,19,325,8,19,1,19,1,19,1,20,1,20,3,20,
        331,8,20,1,20,1,20,1,21,1,21,1,21,3,21,338,8,21,1,21,1,21,1,22,5,
        22,343,8,22,10,22,12,22,346,9,22,1,22,1,22,1,22,3,22,351,8,22,1,
        22,3,22,354,8,22,1,22,3,22,357,8,22,1,22,1,22,1,22,1,22,5,22,363,
        8,22,10,22,12,22,366,9,22,1,22,1,22,1,22,3,22,371,8,22,1,22,3,22,
        374,8,22,1,22,3,22,377,8,22,1,22,3,22,380,8,22,1,22,3,22,383,8,22,
        1,23,1,23,1,23,3,23,388,8,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,26,1,26,3,26,404,8,26,1,26,1,26,1,26,
        3,26,409,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,3,28,423,8,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,431,8,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,443,8,
        31,1,31,1,31,3,31,447,8,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,455,
        8,32,1,32,1,32,3,32,459,8,32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,
        467,8,33,1,33,3,33,470,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,
        34,479,8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,3,36,489,8,36,
        1,36,1,36,1,37,1,37,1,37,1,37,3,37,497,8,37,1,37,3,37,500,8,37,1,
        37,1,37,3,37,504,8,37,1,37,1,37,3,37,508,8,37,1,37,1,37,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,521,8,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,535,8,38,1,38,
        1,38,3,38,539,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        5,38,576,8,38,10,38,12,38,579,9,38,1,39,1,39,1,39,5,39,584,8,39,
        10,39,12,39,587,9,39,1,40,1,40,1,40,3,40,592,8,40,1,41,1,41,1,41,
        1,42,3,42,598,8,42,1,42,1,42,3,42,602,8,42,1,42,1,42,3,42,606,8,
        42,1,43,1,43,1,43,1,43,5,43,612,8,43,10,43,12,43,615,9,43,1,43,3,
        43,618,8,43,1,43,1,43,1,44,1,44,1,44,3,44,625,8,44,1,44,1,44,1,44,
        3,44,630,8,44,5,44,632,8,44,10,44,12,44,635,9,44,1,44,3,44,638,8,
        44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,646,8,45,1,45,1,45,1,45,3,
        45,651,8,45,5,45,653,8,45,10,45,12,45,656,9,45,1,45,3,45,659,8,45,
        3,45,661,8,45,1,45,1,45,1,46,1,46,5,46,667,8,46,10,46,12,46,670,
        9,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,3,48,686,8,48,3,48,688,8,48,1,48,1,48,1,49,1,49,3,49,694,
        8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,712,8,51,1,51,1,51,1,52,1,52,1,52,1,52,
        1,53,1,53,1,54,1,54,3,54,724,8,54,1,55,1,55,1,56,1,56,3,56,730,8,
        56,1,57,1,57,1,57,1,57,3,57,736,8,57,3,57,738,8,57,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,3,58,749,8,58,1,58,1,58,1,58,3,58,
        754,8,58,1,59,1,59,1,59,5,59,759,8,59,10,59,12,59,762,9,59,1,59,
        3,59,765,8,59,1,60,1,60,1,60,5,60,770,8,60,10,60,12,60,773,9,60,
        1,60,3,60,776,8,60,1,61,1,61,1,61,5,61,781,8,61,10,61,12,61,784,
        9,61,1,61,3,61,787,8,61,1,62,1,62,1,62,5,62,792,8,62,10,62,12,62,
        795,9,62,1,62,3,62,798,8,62,1,63,1,63,1,63,5,63,803,8,63,10,63,12,
        63,806,9,63,1,63,3,63,809,8,63,1,64,1,64,1,64,5,64,814,8,64,10,64,
        12,64,817,9,64,1,64,3,64,820,8,64,1,65,1,65,1,65,5,65,825,8,65,10,
        65,12,65,828,9,65,1,65,3,65,831,8,65,1,65,0,1,76,66,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        0,11,1,0,25,26,2,0,30,30,32,32,2,0,66,66,84,84,2,0,70,70,81,82,2,
        0,55,55,88,97,2,0,71,71,73,74,2,0,68,68,70,70,1,0,47,48,1,0,28,29,
        2,0,51,53,93,93,1,0,93,94,938,0,135,1,0,0,0,2,160,1,0,0,0,4,193,
        1,0,0,0,6,196,1,0,0,0,8,206,1,0,0,0,10,247,1,0,0,0,12,249,1,0,0,
        0,14,253,1,0,0,0,16,262,1,0,0,0,18,267,1,0,0,0,20,269,1,0,0,0,22,
        273,1,0,0,0,24,277,1,0,0,0,26,280,1,0,0,0,28,283,1,0,0,0,30,286,
        1,0,0,0,32,300,1,0,0,0,34,309,1,0,0,0,36,316,1,0,0,0,38,322,1,0,
        0,0,40,328,1,0,0,0,42,334,1,0,0,0,44,382,1,0,0,0,46,384,1,0,0,0,
        48,391,1,0,0,0,50,395,1,0,0,0,52,403,1,0,0,0,54,412,1,0,0,0,56,419,
        1,0,0,0,58,427,1,0,0,0,60,434,1,0,0,0,62,438,1,0,0,0,64,450,1,0,
        0,0,66,462,1,0,0,0,68,474,1,0,0,0,70,482,1,0,0,0,72,485,1,0,0,0,
        74,492,1,0,0,0,76,538,1,0,0,0,78,580,1,0,0,0,80,591,1,0,0,0,82,593,
        1,0,0,0,84,597,1,0,0,0,86,607,1,0,0,0,88,621,1,0,0,0,90,641,1,0,
        0,0,92,664,1,0,0,0,94,671,1,0,0,0,96,687,1,0,0,0,98,691,1,0,0,0,
        100,695,1,0,0,0,102,702,1,0,0,0,104,715,1,0,0,0,106,719,1,0,0,0,
        108,723,1,0,0,0,110,725,1,0,0,0,112,729,1,0,0,0,114,737,1,0,0,0,
        116,753,1,0,0,0,118,755,1,0,0,0,120,766,1,0,0,0,122,777,1,0,0,0,
        124,788,1,0,0,0,126,799,1,0,0,0,128,810,1,0,0,0,130,821,1,0,0,0,
        132,134,3,2,1,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,
        135,136,1,0,0,0,136,1,1,0,0,0,137,135,1,0,0,0,138,161,3,50,25,0,
        139,161,3,68,34,0,140,161,3,38,19,0,141,161,3,40,20,0,142,161,3,
        24,12,0,143,161,3,52,26,0,144,161,3,54,27,0,145,161,3,26,13,0,146,
        161,3,62,31,0,147,161,3,42,21,0,148,161,3,28,14,0,149,161,3,70,35,
        0,150,161,3,64,32,0,151,161,3,30,15,0,152,161,3,44,22,0,153,161,
        3,32,16,0,154,161,3,22,11,0,155,161,3,56,28,0,156,161,3,60,30,0,
        157,161,3,48,24,0,158,161,3,34,17,0,159,161,3,36,18,0,160,138,1,
        0,0,0,160,139,1,0,0,0,160,140,1,0,0,0,160,141,1,0,0,0,160,142,1,
        0,0,0,160,143,1,0,0,0,160,144,1,0,0,0,160,145,1,0,0,0,160,146,1,
        0,0,0,160,147,1,0,0,0,160,148,1,0,0,0,160,149,1,0,0,0,160,150,1,
        0,0,0,160,151,1,0,0,0,160,152,1,0,0,0,160,153,1,0,0,0,160,154,1,
        0,0,0,160,155,1,0,0,0,160,156,1,0,0,0,160,157,1,0,0,0,160,158,1,
        0,0,0,160,159,1,0,0,0,161,3,1,0,0,0,162,164,5,34,0,0,163,165,3,104,
        52,0,164,163,1,0,0,0,164,165,1,0,0,0,165,194,1,0,0,0,166,168,5,35,
        0,0,167,169,3,104,52,0,168,167,1,0,0,0,168,169,1,0,0,0,169,194,1,
        0,0,0,170,172,5,36,0,0,171,173,3,104,52,0,172,171,1,0,0,0,172,173,
        1,0,0,0,173,194,1,0,0,0,174,176,5,37,0,0,175,177,3,104,52,0,176,
        175,1,0,0,0,176,177,1,0,0,0,177,194,1,0,0,0,178,180,5,38,0,0,179,
        181,3,104,52,0,180,179,1,0,0,0,180,181,1,0,0,0,181,194,1,0,0,0,182,
        194,5,33,0,0,183,194,5,42,0,0,184,194,5,43,0,0,185,186,5,39,0,0,
        186,187,5,56,0,0,187,188,3,4,2,0,188,189,5,57,0,0,189,194,1,0,0,
        0,190,194,5,1,0,0,191,194,5,2,0,0,192,194,5,3,0,0,193,162,1,0,0,
        0,193,166,1,0,0,0,193,170,1,0,0,0,193,174,1,0,0,0,193,178,1,0,0,
        0,193,182,1,0,0,0,193,183,1,0,0,0,193,184,1,0,0,0,193,185,1,0,0,
        0,193,190,1,0,0,0,193,191,1,0,0,0,193,192,1,0,0,0,194,5,1,0,0,0,
        195,197,3,8,4,0,196,195,1,0,0,0,196,197,1,0,0,0,197,201,1,0,0,0,
        198,200,3,10,5,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,
        201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,0,0,1,
        205,7,1,0,0,0,206,207,5,6,0,0,207,208,5,104,0,0,208,209,5,63,0,0,
        209,9,1,0,0,0,210,248,3,16,8,0,211,213,3,12,6,0,212,211,1,0,0,0,
        213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,245,1,0,0,0,
        216,214,1,0,0,0,217,246,3,50,25,0,218,246,3,68,34,0,219,246,3,38,
        19,0,220,246,3,40,20,0,221,246,3,24,12,0,222,246,3,72,36,0,223,246,
        3,20,10,0,224,246,3,52,26,0,225,246,3,54,27,0,226,246,3,26,13,0,
        227,246,3,62,31,0,228,246,3,74,37,0,229,246,3,42,21,0,230,246,3,
        28,14,0,231,246,3,70,35,0,232,246,3,64,32,0,233,246,3,30,15,0,234,
        246,3,44,22,0,235,246,3,66,33,0,236,246,3,32,16,0,237,246,3,22,11,
        0,238,246,3,56,28,0,239,246,3,46,23,0,240,246,3,58,29,0,241,246,
        3,60,30,0,242,246,3,48,24,0,243,246,3,34,17,0,244,246,3,36,18,0,
        245,217,1,0,0,0,245,218,1,0,0,0,245,219,1,0,0,0,245,220,1,0,0,0,
        245,221,1,0,0,0,245,222,1,0,0,0,245,223,1,0,0,0,245,224,1,0,0,0,
        245,225,1,0,0,0,245,226,1,0,0,0,245,227,1,0,0,0,245,228,1,0,0,0,
        245,229,1,0,0,0,245,230,1,0,0,0,245,231,1,0,0,0,245,232,1,0,0,0,
        245,233,1,0,0,0,245,234,1,0,0,0,245,235,1,0,0,0,245,236,1,0,0,0,
        245,237,1,0,0,0,245,238,1,0,0,0,245,239,1,0,0,0,245,240,1,0,0,0,
        245,241,1,0,0,0,245,242,1,0,0,0,245,243,1,0,0,0,245,244,1,0,0,0,
        246,248,1,0,0,0,247,210,1,0,0,0,247,214,1,0,0,0,248,11,1,0,0,0,249,
        251,5,24,0,0,250,252,5,107,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,
        13,1,0,0,0,253,257,5,58,0,0,254,256,3,10,5,0,255,254,1,0,0,0,256,
        259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,
        257,1,0,0,0,260,261,5,59,0,0,261,15,1,0,0,0,262,263,5,23,0,0,263,
        264,5,107,0,0,264,17,1,0,0,0,265,268,3,10,5,0,266,268,3,14,7,0,267,
        265,1,0,0,0,267,266,1,0,0,0,268,19,1,0,0,0,269,270,5,8,0,0,270,271,
        5,98,0,0,271,272,5,63,0,0,272,21,1,0,0,0,273,274,5,7,0,0,274,275,
        5,98,0,0,275,276,5,63,0,0,276,23,1,0,0,0,277,278,5,14,0,0,278,279,
        5,63,0,0,279,25,1,0,0,0,280,281,5,15,0,0,281,282,5,63,0,0,282,27,
        1,0,0,0,283,284,5,18,0,0,284,285,5,63,0,0,285,29,1,0,0,0,286,287,
        5,20,0,0,287,288,3,4,2,0,288,289,5,93,0,0,289,296,5,22,0,0,290,297,
        3,86,43,0,291,292,5,56,0,0,292,293,3,84,42,0,293,294,5,57,0,0,294,
        297,1,0,0,0,295,297,5,93,0,0,296,290,1,0,0,0,296,291,1,0,0,0,296,
        295,1,0,0,0,297,298,1,0,0,0,298,299,3,18,9,0,299,31,1,0,0,0,300,
        301,5,16,0,0,301,302,5,60,0,0,302,303,3,76,38,0,303,304,5,61,0,0,
        304,307,3,18,9,0,305,306,5,17,0,0,306,308,3,18,9,0,307,305,1,0,0,
        0,307,308,1,0,0,0,308,33,1,0,0,0,309,312,5,19,0,0,310,313,3,76,38,
        0,311,313,3,82,41,0,312,310,1,0,0,0,312,311,1,0,0,0,312,313,1,0,
        0,0,313,314,1,0,0,0,314,315,5,63,0,0,315,35,1,0,0,0,316,317,5,21,
        0,0,317,318,5,60,0,0,318,319,3,76,38,0,319,320,5,61,0,0,320,321,
        3,18,9,0,321,37,1,0,0,0,322,324,5,54,0,0,323,325,3,128,64,0,324,
        323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,327,5,63,0,0,327,
        39,1,0,0,0,328,330,5,12,0,0,329,331,3,104,52,0,330,329,1,0,0,0,330,
        331,1,0,0,0,331,332,1,0,0,0,332,333,3,14,7,0,333,41,1,0,0,0,334,
        335,5,51,0,0,335,337,3,104,52,0,336,338,3,128,64,0,337,336,1,0,0,
        0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,5,63,0,0,340,43,1,0,0,
        0,341,343,3,96,48,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,
        0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,353,5,93,
        0,0,348,350,5,60,0,0,349,351,3,124,62,0,350,349,1,0,0,0,350,351,
        1,0,0,0,351,352,1,0,0,0,352,354,5,61,0,0,353,348,1,0,0,0,353,354,
        1,0,0,0,354,356,1,0,0,0,355,357,3,104,52,0,356,355,1,0,0,0,356,357,
        1,0,0,0,357,358,1,0,0,0,358,359,3,128,64,0,359,360,5,63,0,0,360,
        383,1,0,0,0,361,363,3,96,48,0,362,361,1,0,0,0,363,366,1,0,0,0,364,
        362,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,367,
        373,5,44,0,0,368,370,5,60,0,0,369,371,3,124,62,0,370,369,1,0,0,0,
        370,371,1,0,0,0,371,372,1,0,0,0,372,374,5,61,0,0,373,368,1,0,0,0,
        373,374,1,0,0,0,374,376,1,0,0,0,375,377,3,104,52,0,376,375,1,0,0,
        0,376,377,1,0,0,0,377,379,1,0,0,0,378,380,3,128,64,0,379,378,1,0,
        0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,383,5,63,0,0,382,344,1,0,
        0,0,382,364,1,0,0,0,383,45,1,0,0,0,384,387,3,82,41,0,385,386,5,67,
        0,0,386,388,3,92,46,0,387,385,1,0,0,0,387,388,1,0,0,0,388,389,1,
        0,0,0,389,390,5,63,0,0,390,47,1,0,0,0,391,392,5,52,0,0,392,393,3,
        112,56,0,393,394,5,63,0,0,394,49,1,0,0,0,395,396,5,13,0,0,396,397,
        5,93,0,0,397,398,5,66,0,0,398,399,3,78,39,0,399,400,5,63,0,0,400,
        51,1,0,0,0,401,404,3,4,2,0,402,404,3,100,50,0,403,401,1,0,0,0,403,
        402,1,0,0,0,404,405,1,0,0,0,405,408,5,93,0,0,406,407,5,66,0,0,407,
        409,3,80,40,0,408,406,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,
        411,5,63,0,0,411,53,1,0,0,0,412,413,5,27,0,0,413,414,3,4,2,0,414,
        415,5,93,0,0,415,416,5,66,0,0,416,417,3,80,40,0,417,418,5,63,0,0,
        418,55,1,0,0,0,419,422,7,0,0,0,420,423,3,4,2,0,421,423,3,100,50,
        0,422,420,1,0,0,0,422,421,1,0,0,0,423,424,1,0,0,0,424,425,5,93,0,
        0,425,426,5,63,0,0,426,57,1,0,0,0,427,428,7,1,0,0,428,430,5,93,0,
        0,429,431,3,104,52,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,
        0,0,432,433,5,63,0,0,433,59,1,0,0,0,434,435,3,98,49,0,435,436,5,
        93,0,0,436,437,5,63,0,0,437,61,1,0,0,0,438,439,5,9,0,0,439,440,5,
        93,0,0,440,442,5,60,0,0,441,443,3,118,59,0,442,441,1,0,0,0,442,443,
        1,0,0,0,443,444,1,0,0,0,444,446,5,61,0,0,445,447,3,94,47,0,446,445,
        1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,14,7,0,449,63,
        1,0,0,0,450,451,5,11,0,0,451,452,5,93,0,0,452,454,5,60,0,0,453,455,
        3,130,65,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,458,
        5,61,0,0,457,459,3,94,47,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,
        1,0,0,0,460,461,5,63,0,0,461,65,1,0,0,0,462,463,5,10,0,0,463,469,
        5,93,0,0,464,466,5,60,0,0,465,467,3,126,63,0,466,465,1,0,0,0,466,
        467,1,0,0,0,467,468,1,0,0,0,468,470,5,61,0,0,469,464,1,0,0,0,469,
        470,1,0,0,0,470,471,1,0,0,0,471,472,3,126,63,0,472,473,3,14,7,0,
        473,67,1,0,0,0,474,475,3,92,46,0,475,478,7,2,0,0,476,479,3,76,38,
        0,477,479,3,82,41,0,478,476,1,0,0,0,478,477,1,0,0,0,479,480,1,0,
        0,0,480,481,5,63,0,0,481,69,1,0,0,0,482,483,3,76,38,0,483,484,5,
        63,0,0,484,71,1,0,0,0,485,486,5,4,0,0,486,488,5,58,0,0,487,489,5,
        112,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,
        5,59,0,0,491,73,1,0,0,0,492,493,5,5,0,0,493,499,3,106,53,0,494,496,
        5,60,0,0,495,497,3,120,60,0,496,495,1,0,0,0,496,497,1,0,0,0,497,
        498,1,0,0,0,498,500,5,61,0,0,499,494,1,0,0,0,499,500,1,0,0,0,500,
        501,1,0,0,0,501,503,3,122,61,0,502,504,3,94,47,0,503,502,1,0,0,0,
        503,504,1,0,0,0,504,505,1,0,0,0,505,507,5,58,0,0,506,508,5,112,0,
        0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,510,5,59,0,
        0,510,75,1,0,0,0,511,512,6,38,-1,0,512,513,5,60,0,0,513,514,3,76,
        38,0,514,515,5,61,0,0,515,539,1,0,0,0,516,517,7,3,0,0,517,539,3,
        76,38,15,518,521,3,4,2,0,519,521,3,100,50,0,520,518,1,0,0,0,520,
        519,1,0,0,0,521,522,1,0,0,0,522,523,5,60,0,0,523,524,3,76,38,0,524,
        525,5,61,0,0,525,539,1,0,0,0,526,527,5,50,0,0,527,528,5,60,0,0,528,
        529,3,14,7,0,529,530,5,61,0,0,530,539,1,0,0,0,531,532,5,93,0,0,532,
        534,5,60,0,0,533,535,3,124,62,0,534,533,1,0,0,0,534,535,1,0,0,0,
        535,536,1,0,0,0,536,539,5,61,0,0,537,539,7,4,0,0,538,511,1,0,0,0,
        538,516,1,0,0,0,538,520,1,0,0,0,538,526,1,0,0,0,538,531,1,0,0,0,
        538,537,1,0,0,0,539,577,1,0,0,0,540,541,10,16,0,0,541,542,5,72,0,
        0,542,576,3,76,38,16,543,544,10,14,0,0,544,545,7,5,0,0,545,576,3,
        76,38,15,546,547,10,13,0,0,547,548,7,6,0,0,548,576,3,76,38,14,549,
        550,10,12,0,0,550,551,5,86,0,0,551,576,3,76,38,13,552,553,10,11,
        0,0,553,554,5,85,0,0,554,576,3,76,38,12,555,556,10,10,0,0,556,557,
        5,83,0,0,557,576,3,76,38,11,558,559,10,9,0,0,559,560,5,77,0,0,560,
        576,3,76,38,10,561,562,10,8,0,0,562,563,5,79,0,0,563,576,3,76,38,
        9,564,565,10,7,0,0,565,566,5,75,0,0,566,576,3,76,38,8,567,568,10,
        6,0,0,568,569,5,78,0,0,569,576,3,76,38,7,570,571,10,5,0,0,571,572,
        5,76,0,0,572,576,3,76,38,6,573,574,10,17,0,0,574,576,3,90,45,0,575,
        540,1,0,0,0,575,543,1,0,0,0,575,546,1,0,0,0,575,549,1,0,0,0,575,
        552,1,0,0,0,575,555,1,0,0,0,575,558,1,0,0,0,575,561,1,0,0,0,575,
        564,1,0,0,0,575,567,1,0,0,0,575,570,1,0,0,0,575,573,1,0,0,0,576,
        579,1,0,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,77,1,0,0,0,579,577,
        1,0,0,0,580,585,3,76,38,0,581,582,5,69,0,0,582,584,3,76,38,0,583,
        581,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,
        79,1,0,0,0,587,585,1,0,0,0,588,592,3,88,44,0,589,592,3,76,38,0,590,
        592,3,82,41,0,591,588,1,0,0,0,591,589,1,0,0,0,591,590,1,0,0,0,592,
        81,1,0,0,0,593,594,5,53,0,0,594,595,3,112,56,0,595,83,1,0,0,0,596,
        598,3,76,38,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
        601,5,62,0,0,600,602,3,76,38,0,601,600,1,0,0,0,601,602,1,0,0,0,602,
        605,1,0,0,0,603,604,5,62,0,0,604,606,3,76,38,0,605,603,1,0,0,0,605,
        606,1,0,0,0,606,85,1,0,0,0,607,608,5,58,0,0,608,613,3,76,38,0,609,
        610,5,65,0,0,610,612,3,76,38,0,611,609,1,0,0,0,612,615,1,0,0,0,613,
        611,1,0,0,0,613,614,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,616,
        618,5,65,0,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,
        620,5,59,0,0,620,87,1,0,0,0,621,624,5,58,0,0,622,625,3,76,38,0,623,
        625,3,88,44,0,624,622,1,0,0,0,624,623,1,0,0,0,625,633,1,0,0,0,626,
        629,5,65,0,0,627,630,3,76,38,0,628,630,3,88,44,0,629,627,1,0,0,0,
        629,628,1,0,0,0,630,632,1,0,0,0,631,626,1,0,0,0,632,635,1,0,0,0,
        633,631,1,0,0,0,633,634,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,
        636,638,5,65,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,
        639,640,5,59,0,0,640,89,1,0,0,0,641,660,5,56,0,0,642,661,3,86,43,
        0,643,646,3,76,38,0,644,646,3,84,42,0,645,643,1,0,0,0,645,644,1,
        0,0,0,646,654,1,0,0,0,647,650,5,65,0,0,648,651,3,76,38,0,649,651,
        3,84,42,0,650,648,1,0,0,0,650,649,1,0,0,0,651,653,1,0,0,0,652,647,
        1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,0,655,658,
        1,0,0,0,656,654,1,0,0,0,657,659,5,65,0,0,658,657,1,0,0,0,658,659,
        1,0,0,0,659,661,1,0,0,0,660,642,1,0,0,0,660,645,1,0,0,0,661,662,
        1,0,0,0,662,663,5,57,0,0,663,91,1,0,0,0,664,668,5,93,0,0,665,667,
        3,90,45,0,666,665,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,
        1,0,0,0,669,93,1,0,0,0,670,668,1,0,0,0,671,672,5,67,0,0,672,673,
        3,4,2,0,673,95,1,0,0,0,674,688,5,45,0,0,675,676,5,46,0,0,676,677,
        5,60,0,0,677,678,3,76,38,0,678,679,5,61,0,0,679,688,1,0,0,0,680,
        685,7,7,0,0,681,682,5,60,0,0,682,683,3,76,38,0,683,684,5,61,0,0,
        684,686,1,0,0,0,685,681,1,0,0,0,685,686,1,0,0,0,686,688,1,0,0,0,
        687,674,1,0,0,0,687,675,1,0,0,0,687,680,1,0,0,0,688,689,1,0,0,0,
        689,690,5,80,0,0,690,97,1,0,0,0,691,693,5,31,0,0,692,694,3,104,52,
        0,693,692,1,0,0,0,693,694,1,0,0,0,694,99,1,0,0,0,695,696,5,40,0,
        0,696,697,5,56,0,0,697,698,3,4,2,0,698,699,5,65,0,0,699,700,3,124,
        62,0,700,701,5,57,0,0,701,101,1,0,0,0,702,703,7,8,0,0,703,704,5,
        40,0,0,704,705,5,56,0,0,705,706,3,4,2,0,706,711,5,65,0,0,707,712,
        3,124,62,0,708,709,5,49,0,0,709,710,5,66,0,0,710,712,3,76,38,0,711,
        707,1,0,0,0,711,708,1,0,0,0,712,713,1,0,0,0,713,714,5,57,0,0,714,
        103,1,0,0,0,715,716,5,56,0,0,716,717,3,76,38,0,717,718,5,57,0,0,
        718,105,1,0,0,0,719,720,7,9,0,0,720,107,1,0,0,0,721,724,3,76,38,
        0,722,724,3,116,58,0,723,721,1,0,0,0,723,722,1,0,0,0,724,109,1,0,
        0,0,725,726,7,10,0,0,726,111,1,0,0,0,727,730,3,92,46,0,728,730,5,
        94,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,113,1,0,0,0,731,738,3,
        4,2,0,732,738,3,102,51,0,733,735,5,32,0,0,734,736,3,104,52,0,735,
        734,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,731,1,0,0,0,737,
        732,1,0,0,0,737,733,1,0,0,0,738,115,1,0,0,0,739,740,3,4,2,0,740,
        741,5,93,0,0,741,754,1,0,0,0,742,743,3,98,49,0,743,744,5,93,0,0,
        744,754,1,0,0,0,745,746,7,1,0,0,746,748,5,93,0,0,747,749,3,104,52,
        0,748,747,1,0,0,0,748,749,1,0,0,0,749,754,1,0,0,0,750,751,3,102,
        51,0,751,752,5,93,0,0,752,754,1,0,0,0,753,739,1,0,0,0,753,742,1,
        0,0,0,753,745,1,0,0,0,753,750,1,0,0,0,754,117,1,0,0,0,755,760,3,
        116,58,0,756,757,5,65,0,0,757,759,3,116,58,0,758,756,1,0,0,0,759,
        762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,764,1,0,0,0,762,
        760,1,0,0,0,763,765,5,65,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,
        119,1,0,0,0,766,771,3,108,54,0,767,768,5,65,0,0,768,770,3,108,54,
        0,769,767,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,771,772,1,0,0,
        0,772,775,1,0,0,0,773,771,1,0,0,0,774,776,5,65,0,0,775,774,1,0,0,
        0,775,776,1,0,0,0,776,121,1,0,0,0,777,782,3,110,55,0,778,779,5,65,
        0,0,779,781,3,110,55,0,780,778,1,0,0,0,781,784,1,0,0,0,782,780,1,
        0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,785,787,5,
        65,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,123,1,0,0,0,788,793,3,
        76,38,0,789,790,5,65,0,0,790,792,3,76,38,0,791,789,1,0,0,0,792,795,
        1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,794,797,1,0,0,0,795,793,
        1,0,0,0,796,798,5,65,0,0,797,796,1,0,0,0,797,798,1,0,0,0,798,125,
        1,0,0,0,799,804,5,93,0,0,800,801,5,65,0,0,801,803,5,93,0,0,802,800,
        1,0,0,0,803,806,1,0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,808,
        1,0,0,0,806,804,1,0,0,0,807,809,5,65,0,0,808,807,1,0,0,0,808,809,
        1,0,0,0,809,127,1,0,0,0,810,815,3,112,56,0,811,812,5,65,0,0,812,
        814,3,112,56,0,813,811,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,
        816,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,818,820,5,65,0,0,819,
        818,1,0,0,0,819,820,1,0,0,0,820,129,1,0,0,0,821,826,3,114,57,0,822,
        823,5,65,0,0,823,825,3,114,57,0,824,822,1,0,0,0,825,828,1,0,0,0,
        826,824,1,0,0,0,826,827,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,
        829,831,5,65,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,131,1,0,0,0,
        95,135,160,164,168,172,176,180,193,196,201,214,245,247,251,257,267,
        296,307,312,324,330,337,344,350,353,356,364,370,373,376,379,382,
        387,403,408,422,430,442,446,454,458,466,469,478,488,496,499,503,
        507,520,534,538,575,577,585,591,597,601,605,613,617,624,629,633,
        637,645,650,654,658,660,668,685,687,693,711,723,729,735,737,748,
        753,760,764,771,775,782,786,793,797,804,808,815,819,826,830
    ]

class openpulseParser ( Parser ):

    grammarFileName = "openpulseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'waveform'", "'port'", "'frame'", "'cal'", 
                     "'defcal'", "'OPENQASM'", "'include'", "'defcalgrammar'", 
                     "'def'", "'gate'", "'extern'", "'box'", "'let'", "'break'", 
                     "'continue'", "'if'", "'else'", "'end'", "'return'", 
                     "'for'", "'while'", "'in'", "<INVALID>", "<INVALID>", 
                     "'input'", "'output'", "'const'", "'readonly'", "'mutable'", 
                     "'qreg'", "'qubit'", "'creg'", "'bool'", "'bit'", "'int'", 
                     "'uint'", "'float'", "'angle'", "'complex'", "'array'", 
                     "'void'", "'duration'", "'stretch'", "'gphase'", "'inv'", 
                     "'pow'", "'ctrl'", "'negctrl'", "'#dim'", "'durationof'", 
                     "'delay'", "'reset'", "'measure'", "'barrier'", "<INVALID>", 
                     "'['", "']'", "'{'", "'}'", "'('", "')'", "':'", "';'", 
                     "'.'", "','", "'='", "'->'", "'+'", "'++'", "'-'", 
                     "'*'", "'**'", "'/'", "'%'", "'|'", "'||'", "'&'", 
                     "'&&'", "'^'", "'@'", "'~'", "'!'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'im'" ]

    symbolicNames = [ "<INVALID>", "WAVEFORM", "PORT", "FRAME", "CAL", "DEFCAL", 
                      "OPENQASM", "INCLUDE", "DEFCALGRAMMAR", "DEF", "GATE", 
                      "EXTERN", "BOX", "LET", "BREAK", "CONTINUE", "IF", 
                      "ELSE", "END", "RETURN", "FOR", "WHILE", "IN", "PRAGMA", 
                      "AnnotationKeyword", "INPUT", "OUTPUT", "CONST", "READONLY", 
                      "MUTABLE", "QREG", "QUBIT", "CREG", "BOOL", "BIT", 
                      "INT", "UINT", "FLOAT", "ANGLE", "COMPLEX", "ARRAY", 
                      "VOID", "DURATION", "STRETCH", "GPHASE", "INV", "POW", 
                      "CTRL", "NEGCTRL", "DIM", "DURATIONOF", "DELAY", "RESET", 
                      "MEASURE", "BARRIER", "BooleanLiteral", "LBRACKET", 
                      "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
                      "COLON", "SEMICOLON", "DOT", "COMMA", "EQUALS", "ARROW", 
                      "PLUS", "DOUBLE_PLUS", "MINUS", "ASTERISK", "DOUBLE_ASTERISK", 
                      "SLASH", "PERCENT", "PIPE", "DOUBLE_PIPE", "AMPERSAND", 
                      "DOUBLE_AMPERSAND", "CARET", "AT", "TILDE", "EXCLAMATION_POINT", 
                      "EqualityOperator", "CompoundAssignmentOperator", 
                      "ComparisonOperator", "BitshiftOperator", "IMAG", 
                      "ImaginaryLiteral", "BinaryIntegerLiteral", "OctalIntegerLiteral", 
                      "DecimalIntegerLiteral", "HexIntegerLiteral", "Identifier", 
                      "HardwareQubit", "FloatLiteral", "TimingLiteral", 
                      "BitstringLiteral", "StringLiteral", "Whitespace", 
                      "Newline", "LineComment", "BlockComment", "VERSION_IDENTIFER_WHITESPACE", 
                      "VersionSpecifier", "EAT_INITIAL_SPACE", "EAT_LINE_END", 
                      "RemainingLineContent", "CAL_PRELUDE_WHITESPACE", 
                      "CAL_PRELUDE_COMMENT", "DEFCAL_PRELUDE_WHITESPACE", 
                      "DEFCAL_PRELUDE_COMMENT", "CalibrationBlock" ]

    RULE_calibrationBlock = 0
    RULE_openpulseStatement = 1
    RULE_scalarType = 2
    RULE_program = 3
    RULE_version = 4
    RULE_statement = 5
    RULE_annotation = 6
    RULE_scope = 7
    RULE_pragma = 8
    RULE_statementOrScope = 9
    RULE_calibrationGrammarStatement = 10
    RULE_includeStatement = 11
    RULE_breakStatement = 12
    RULE_continueStatement = 13
    RULE_endStatement = 14
    RULE_forStatement = 15
    RULE_ifStatement = 16
    RULE_returnStatement = 17
    RULE_whileStatement = 18
    RULE_barrierStatement = 19
    RULE_boxStatement = 20
    RULE_delayStatement = 21
    RULE_gateCallStatement = 22
    RULE_measureArrowAssignmentStatement = 23
    RULE_resetStatement = 24
    RULE_aliasDeclarationStatement = 25
    RULE_classicalDeclarationStatement = 26
    RULE_constDeclarationStatement = 27
    RULE_ioDeclarationStatement = 28
    RULE_oldStyleDeclarationStatement = 29
    RULE_quantumDeclarationStatement = 30
    RULE_defStatement = 31
    RULE_externStatement = 32
    RULE_gateStatement = 33
    RULE_assignmentStatement = 34
    RULE_expressionStatement = 35
    RULE_calStatement = 36
    RULE_defcalStatement = 37
    RULE_expression = 38
    RULE_aliasExpression = 39
    RULE_declarationExpression = 40
    RULE_measureExpression = 41
    RULE_rangeExpression = 42
    RULE_setExpression = 43
    RULE_arrayLiteral = 44
    RULE_indexOperator = 45
    RULE_indexedIdentifier = 46
    RULE_returnSignature = 47
    RULE_gateModifier = 48
    RULE_qubitType = 49
    RULE_arrayType = 50
    RULE_arrayReferenceType = 51
    RULE_designator = 52
    RULE_defcalTarget = 53
    RULE_defcalArgumentDefinition = 54
    RULE_defcalOperand = 55
    RULE_gateOperand = 56
    RULE_externArgument = 57
    RULE_argumentDefinition = 58
    RULE_argumentDefinitionList = 59
    RULE_defcalArgumentDefinitionList = 60
    RULE_defcalOperandList = 61
    RULE_expressionList = 62
    RULE_identifierList = 63
    RULE_gateOperandList = 64
    RULE_externArgumentList = 65

    ruleNames =  [ "calibrationBlock", "openpulseStatement", "scalarType", 
                   "program", "version", "statement", "annotation", "scope", 
                   "pragma", "statementOrScope", "calibrationGrammarStatement", 
                   "includeStatement", "breakStatement", "continueStatement", 
                   "endStatement", "forStatement", "ifStatement", "returnStatement", 
                   "whileStatement", "barrierStatement", "boxStatement", 
                   "delayStatement", "gateCallStatement", "measureArrowAssignmentStatement", 
                   "resetStatement", "aliasDeclarationStatement", "classicalDeclarationStatement", 
                   "constDeclarationStatement", "ioDeclarationStatement", 
                   "oldStyleDeclarationStatement", "quantumDeclarationStatement", 
                   "defStatement", "externStatement", "gateStatement", "assignmentStatement", 
                   "expressionStatement", "calStatement", "defcalStatement", 
                   "expression", "aliasExpression", "declarationExpression", 
                   "measureExpression", "rangeExpression", "setExpression", 
                   "arrayLiteral", "indexOperator", "indexedIdentifier", 
                   "returnSignature", "gateModifier", "qubitType", "arrayType", 
                   "arrayReferenceType", "designator", "defcalTarget", "defcalArgumentDefinition", 
                   "defcalOperand", "gateOperand", "externArgument", "argumentDefinition", 
                   "argumentDefinitionList", "defcalArgumentDefinitionList", 
                   "defcalOperandList", "expressionList", "identifierList", 
                   "gateOperandList", "externArgumentList" ]

    EOF = Token.EOF
    WAVEFORM=1
    PORT=2
    FRAME=3
    CAL=4
    DEFCAL=5
    OPENQASM=6
    INCLUDE=7
    DEFCALGRAMMAR=8
    DEF=9
    GATE=10
    EXTERN=11
    BOX=12
    LET=13
    BREAK=14
    CONTINUE=15
    IF=16
    ELSE=17
    END=18
    RETURN=19
    FOR=20
    WHILE=21
    IN=22
    PRAGMA=23
    AnnotationKeyword=24
    INPUT=25
    OUTPUT=26
    CONST=27
    READONLY=28
    MUTABLE=29
    QREG=30
    QUBIT=31
    CREG=32
    BOOL=33
    BIT=34
    INT=35
    UINT=36
    FLOAT=37
    ANGLE=38
    COMPLEX=39
    ARRAY=40
    VOID=41
    DURATION=42
    STRETCH=43
    GPHASE=44
    INV=45
    POW=46
    CTRL=47
    NEGCTRL=48
    DIM=49
    DURATIONOF=50
    DELAY=51
    RESET=52
    MEASURE=53
    BARRIER=54
    BooleanLiteral=55
    LBRACKET=56
    RBRACKET=57
    LBRACE=58
    RBRACE=59
    LPAREN=60
    RPAREN=61
    COLON=62
    SEMICOLON=63
    DOT=64
    COMMA=65
    EQUALS=66
    ARROW=67
    PLUS=68
    DOUBLE_PLUS=69
    MINUS=70
    ASTERISK=71
    DOUBLE_ASTERISK=72
    SLASH=73
    PERCENT=74
    PIPE=75
    DOUBLE_PIPE=76
    AMPERSAND=77
    DOUBLE_AMPERSAND=78
    CARET=79
    AT=80
    TILDE=81
    EXCLAMATION_POINT=82
    EqualityOperator=83
    CompoundAssignmentOperator=84
    ComparisonOperator=85
    BitshiftOperator=86
    IMAG=87
    ImaginaryLiteral=88
    BinaryIntegerLiteral=89
    OctalIntegerLiteral=90
    DecimalIntegerLiteral=91
    HexIntegerLiteral=92
    Identifier=93
    HardwareQubit=94
    FloatLiteral=95
    TimingLiteral=96
    BitstringLiteral=97
    StringLiteral=98
    Whitespace=99
    Newline=100
    LineComment=101
    BlockComment=102
    VERSION_IDENTIFER_WHITESPACE=103
    VersionSpecifier=104
    EAT_INITIAL_SPACE=105
    EAT_LINE_END=106
    RemainingLineContent=107
    CAL_PRELUDE_WHITESPACE=108
    CAL_PRELUDE_COMMENT=109
    DEFCAL_PRELUDE_WHITESPACE=110
    DEFCAL_PRELUDE_COMMENT=111
    CalibrationBlock=112

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CalibrationBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openpulseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.OpenpulseStatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.OpenpulseStatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationBlock" ):
                listener.enterCalibrationBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationBlock" ):
                listener.exitCalibrationBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationBlock" ):
                return visitor.visitCalibrationBlock(self)
            else:
                return visitor.visitChildren(self)




    def calibrationBlock(self):

        localctx = openpulseParser.CalibrationBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_calibrationBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEF) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 132
                self.openpulseStatement()
                self.state = 137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpenpulseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_openpulseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenpulseStatement" ):
                listener.enterOpenpulseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenpulseStatement" ):
                listener.exitOpenpulseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenpulseStatement" ):
                return visitor.visitOpenpulseStatement(self)
            else:
                return visitor.visitChildren(self)




    def openpulseStatement(self):

        localctx = openpulseParser.OpenpulseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_openpulseStatement)
        try:
            self.state = 160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 138
                self.aliasDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 139
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 140
                self.barrierStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 141
                self.boxStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 142
                self.breakStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 143
                self.classicalDeclarationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 144
                self.constDeclarationStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 145
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 146
                self.defStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 147
                self.delayStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 148
                self.endStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 149
                self.expressionStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 150
                self.externStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 151
                self.forStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 152
                self.gateCallStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 153
                self.ifStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 154
                self.includeStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 155
                self.ioDeclarationStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 156
                self.quantumDeclarationStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 157
                self.resetStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 158
                self.returnStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 159
                self.whileStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT(self):
            return self.getToken(openpulseParser.BIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def INT(self):
            return self.getToken(openpulseParser.INT, 0)

        def UINT(self):
            return self.getToken(openpulseParser.UINT, 0)

        def FLOAT(self):
            return self.getToken(openpulseParser.FLOAT, 0)

        def ANGLE(self):
            return self.getToken(openpulseParser.ANGLE, 0)

        def BOOL(self):
            return self.getToken(openpulseParser.BOOL, 0)

        def DURATION(self):
            return self.getToken(openpulseParser.DURATION, 0)

        def STRETCH(self):
            return self.getToken(openpulseParser.STRETCH, 0)

        def COMPLEX(self):
            return self.getToken(openpulseParser.COMPLEX, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def WAVEFORM(self):
            return self.getToken(openpulseParser.WAVEFORM, 0)

        def PORT(self):
            return self.getToken(openpulseParser.PORT, 0)

        def FRAME(self):
            return self.getToken(openpulseParser.FRAME, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_scalarType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarType" ):
                listener.enterScalarType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarType" ):
                listener.exitScalarType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarType" ):
                return visitor.visitScalarType(self)
            else:
                return visitor.visitChildren(self)




    def scalarType(self):

        localctx = openpulseParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_scalarType)
        self._la = 0 # Token type
        try:
            self.state = 193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.BIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self.match(openpulseParser.BIT)
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 163
                    self.designator()


                pass
            elif token in [openpulseParser.INT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 166
                self.match(openpulseParser.INT)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 167
                    self.designator()


                pass
            elif token in [openpulseParser.UINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 170
                self.match(openpulseParser.UINT)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 171
                    self.designator()


                pass
            elif token in [openpulseParser.FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 174
                self.match(openpulseParser.FLOAT)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 175
                    self.designator()


                pass
            elif token in [openpulseParser.ANGLE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 178
                self.match(openpulseParser.ANGLE)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 179
                    self.designator()


                pass
            elif token in [openpulseParser.BOOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 182
                self.match(openpulseParser.BOOL)
                pass
            elif token in [openpulseParser.DURATION]:
                self.enterOuterAlt(localctx, 7)
                self.state = 183
                self.match(openpulseParser.DURATION)
                pass
            elif token in [openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 8)
                self.state = 184
                self.match(openpulseParser.STRETCH)
                pass
            elif token in [openpulseParser.COMPLEX]:
                self.enterOuterAlt(localctx, 9)
                self.state = 185
                self.match(openpulseParser.COMPLEX)
                self.state = 186
                self.match(openpulseParser.LBRACKET)
                self.state = 187
                self.scalarType()
                self.state = 188
                self.match(openpulseParser.RBRACKET)
                pass
            elif token in [openpulseParser.WAVEFORM]:
                self.enterOuterAlt(localctx, 10)
                self.state = 190
                self.match(openpulseParser.WAVEFORM)
                pass
            elif token in [openpulseParser.PORT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 191
                self.match(openpulseParser.PORT)
                pass
            elif token in [openpulseParser.FRAME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 192
                self.match(openpulseParser.FRAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(openpulseParser.EOF, 0)

        def version(self):
            return self.getTypedRuleContext(openpulseParser.VersionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = openpulseParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.OPENQASM:
                self.state = 195
                self.version()


            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.CAL) | (1 << openpulseParser.DEFCAL) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEFCALGRAMMAR) | (1 << openpulseParser.DEF) | (1 << openpulseParser.GATE) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.PRAGMA) | (1 << openpulseParser.AnnotationKeyword) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.MEASURE) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 198
                self.statement()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self.match(openpulseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPENQASM(self):
            return self.getToken(openpulseParser.OPENQASM, 0)

        def VersionSpecifier(self):
            return self.getToken(openpulseParser.VersionSpecifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = openpulseParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(openpulseParser.OPENQASM)
            self.state = 207
            self.match(openpulseParser.VersionSpecifier)
            self.state = 208
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragma(self):
            return self.getTypedRuleContext(openpulseParser.PragmaContext,0)


        def aliasDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.AliasDeclarationStatementContext,0)


        def assignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.AssignmentStatementContext,0)


        def barrierStatement(self):
            return self.getTypedRuleContext(openpulseParser.BarrierStatementContext,0)


        def boxStatement(self):
            return self.getTypedRuleContext(openpulseParser.BoxStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(openpulseParser.BreakStatementContext,0)


        def calStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalStatementContext,0)


        def calibrationGrammarStatement(self):
            return self.getTypedRuleContext(openpulseParser.CalibrationGrammarStatementContext,0)


        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ClassicalDeclarationStatementContext,0)


        def constDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.ConstDeclarationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(openpulseParser.ContinueStatementContext,0)


        def defStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefStatementContext,0)


        def defcalStatement(self):
            return self.getTypedRuleContext(openpulseParser.DefcalStatementContext,0)


        def delayStatement(self):
            return self.getTypedRuleContext(openpulseParser.DelayStatementContext,0)


        def endStatement(self):
            return self.getTypedRuleContext(openpulseParser.EndStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionStatementContext,0)


        def externStatement(self):
            return self.getTypedRuleContext(openpulseParser.ExternStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(openpulseParser.ForStatementContext,0)


        def gateCallStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateCallStatementContext,0)


        def gateStatement(self):
            return self.getTypedRuleContext(openpulseParser.GateStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(openpulseParser.IfStatementContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(openpulseParser.IncludeStatementContext,0)


        def ioDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.IoDeclarationStatementContext,0)


        def measureArrowAssignmentStatement(self):
            return self.getTypedRuleContext(openpulseParser.MeasureArrowAssignmentStatementContext,0)


        def oldStyleDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.OldStyleDeclarationStatementContext,0)


        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(openpulseParser.QuantumDeclarationStatementContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(openpulseParser.ResetStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(openpulseParser.ReturnStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(openpulseParser.WhileStatementContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(openpulseParser.AnnotationContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = openpulseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.PRAGMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.pragma()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.CAL, openpulseParser.DEFCAL, openpulseParser.INCLUDE, openpulseParser.DEFCALGRAMMAR, openpulseParser.DEF, openpulseParser.GATE, openpulseParser.EXTERN, openpulseParser.BOX, openpulseParser.LET, openpulseParser.BREAK, openpulseParser.CONTINUE, openpulseParser.IF, openpulseParser.END, openpulseParser.RETURN, openpulseParser.FOR, openpulseParser.WHILE, openpulseParser.AnnotationKeyword, openpulseParser.INPUT, openpulseParser.OUTPUT, openpulseParser.CONST, openpulseParser.QREG, openpulseParser.QUBIT, openpulseParser.CREG, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.GPHASE, openpulseParser.INV, openpulseParser.POW, openpulseParser.CTRL, openpulseParser.NEGCTRL, openpulseParser.DURATIONOF, openpulseParser.DELAY, openpulseParser.RESET, openpulseParser.MEASURE, openpulseParser.BARRIER, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openpulseParser.AnnotationKeyword:
                    self.state = 211
                    self.annotation()
                    self.state = 216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 217
                    self.aliasDeclarationStatement()
                    pass

                elif la_ == 2:
                    self.state = 218
                    self.assignmentStatement()
                    pass

                elif la_ == 3:
                    self.state = 219
                    self.barrierStatement()
                    pass

                elif la_ == 4:
                    self.state = 220
                    self.boxStatement()
                    pass

                elif la_ == 5:
                    self.state = 221
                    self.breakStatement()
                    pass

                elif la_ == 6:
                    self.state = 222
                    self.calStatement()
                    pass

                elif la_ == 7:
                    self.state = 223
                    self.calibrationGrammarStatement()
                    pass

                elif la_ == 8:
                    self.state = 224
                    self.classicalDeclarationStatement()
                    pass

                elif la_ == 9:
                    self.state = 225
                    self.constDeclarationStatement()
                    pass

                elif la_ == 10:
                    self.state = 226
                    self.continueStatement()
                    pass

                elif la_ == 11:
                    self.state = 227
                    self.defStatement()
                    pass

                elif la_ == 12:
                    self.state = 228
                    self.defcalStatement()
                    pass

                elif la_ == 13:
                    self.state = 229
                    self.delayStatement()
                    pass

                elif la_ == 14:
                    self.state = 230
                    self.endStatement()
                    pass

                elif la_ == 15:
                    self.state = 231
                    self.expressionStatement()
                    pass

                elif la_ == 16:
                    self.state = 232
                    self.externStatement()
                    pass

                elif la_ == 17:
                    self.state = 233
                    self.forStatement()
                    pass

                elif la_ == 18:
                    self.state = 234
                    self.gateCallStatement()
                    pass

                elif la_ == 19:
                    self.state = 235
                    self.gateStatement()
                    pass

                elif la_ == 20:
                    self.state = 236
                    self.ifStatement()
                    pass

                elif la_ == 21:
                    self.state = 237
                    self.includeStatement()
                    pass

                elif la_ == 22:
                    self.state = 238
                    self.ioDeclarationStatement()
                    pass

                elif la_ == 23:
                    self.state = 239
                    self.measureArrowAssignmentStatement()
                    pass

                elif la_ == 24:
                    self.state = 240
                    self.oldStyleDeclarationStatement()
                    pass

                elif la_ == 25:
                    self.state = 241
                    self.quantumDeclarationStatement()
                    pass

                elif la_ == 26:
                    self.state = 242
                    self.resetStatement()
                    pass

                elif la_ == 27:
                    self.state = 243
                    self.returnStatement()
                    pass

                elif la_ == 28:
                    self.state = 244
                    self.whileStatement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AnnotationKeyword(self):
            return self.getToken(openpulseParser.AnnotationKeyword, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = openpulseParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(openpulseParser.AnnotationKeyword)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.RemainingLineContent:
                self.state = 250
                self.match(openpulseParser.RemainingLineContent)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = openpulseParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(openpulseParser.LBRACE)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.CAL) | (1 << openpulseParser.DEFCAL) | (1 << openpulseParser.INCLUDE) | (1 << openpulseParser.DEFCALGRAMMAR) | (1 << openpulseParser.DEF) | (1 << openpulseParser.GATE) | (1 << openpulseParser.EXTERN) | (1 << openpulseParser.BOX) | (1 << openpulseParser.LET) | (1 << openpulseParser.BREAK) | (1 << openpulseParser.CONTINUE) | (1 << openpulseParser.IF) | (1 << openpulseParser.END) | (1 << openpulseParser.RETURN) | (1 << openpulseParser.FOR) | (1 << openpulseParser.WHILE) | (1 << openpulseParser.PRAGMA) | (1 << openpulseParser.AnnotationKeyword) | (1 << openpulseParser.INPUT) | (1 << openpulseParser.OUTPUT) | (1 << openpulseParser.CONST) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.GPHASE) | (1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.DELAY) | (1 << openpulseParser.RESET) | (1 << openpulseParser.MEASURE) | (1 << openpulseParser.BARRIER) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 254
                self.statement()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 260
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(openpulseParser.PRAGMA, 0)

        def RemainingLineContent(self):
            return self.getToken(openpulseParser.RemainingLineContent, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_pragma

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma" ):
                listener.enterPragma(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma" ):
                listener.exitPragma(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma" ):
                return visitor.visitPragma(self)
            else:
                return visitor.visitChildren(self)




    def pragma(self):

        localctx = openpulseParser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pragma)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(openpulseParser.PRAGMA)
            self.state = 263
            self.match(openpulseParser.RemainingLineContent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementOrScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(openpulseParser.StatementContext,0)


        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_statementOrScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementOrScope" ):
                listener.enterStatementOrScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementOrScope" ):
                listener.exitStatementOrScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementOrScope" ):
                return visitor.visitStatementOrScope(self)
            else:
                return visitor.visitChildren(self)




    def statementOrScope(self):

        localctx = openpulseParser.StatementOrScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_statementOrScope)
        try:
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.CAL, openpulseParser.DEFCAL, openpulseParser.INCLUDE, openpulseParser.DEFCALGRAMMAR, openpulseParser.DEF, openpulseParser.GATE, openpulseParser.EXTERN, openpulseParser.BOX, openpulseParser.LET, openpulseParser.BREAK, openpulseParser.CONTINUE, openpulseParser.IF, openpulseParser.END, openpulseParser.RETURN, openpulseParser.FOR, openpulseParser.WHILE, openpulseParser.PRAGMA, openpulseParser.AnnotationKeyword, openpulseParser.INPUT, openpulseParser.OUTPUT, openpulseParser.CONST, openpulseParser.QREG, openpulseParser.QUBIT, openpulseParser.CREG, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.GPHASE, openpulseParser.INV, openpulseParser.POW, openpulseParser.CTRL, openpulseParser.NEGCTRL, openpulseParser.DURATIONOF, openpulseParser.DELAY, openpulseParser.RESET, openpulseParser.MEASURE, openpulseParser.BARRIER, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.statement()
                pass
            elif token in [openpulseParser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalibrationGrammarStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCALGRAMMAR(self):
            return self.getToken(openpulseParser.DEFCALGRAMMAR, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calibrationGrammarStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalibrationGrammarStatement" ):
                listener.enterCalibrationGrammarStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalibrationGrammarStatement" ):
                listener.exitCalibrationGrammarStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalibrationGrammarStatement" ):
                return visitor.visitCalibrationGrammarStatement(self)
            else:
                return visitor.visitChildren(self)




    def calibrationGrammarStatement(self):

        localctx = openpulseParser.CalibrationGrammarStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_calibrationGrammarStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(openpulseParser.DEFCALGRAMMAR)
            self.state = 270
            self.match(openpulseParser.StringLiteral)
            self.state = 271
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCLUDE(self):
            return self.getToken(openpulseParser.INCLUDE, 0)

        def StringLiteral(self):
            return self.getToken(openpulseParser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_includeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStatement" ):
                listener.enterIncludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStatement" ):
                listener.exitIncludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStatement" ):
                return visitor.visitIncludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def includeStatement(self):

        localctx = openpulseParser.IncludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_includeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(openpulseParser.INCLUDE)
            self.state = 274
            self.match(openpulseParser.StringLiteral)
            self.state = 275
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(openpulseParser.BREAK, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = openpulseParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(openpulseParser.BREAK)
            self.state = 278
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(openpulseParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = openpulseParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(openpulseParser.CONTINUE)
            self.state = 281
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(openpulseParser.END, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_endStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndStatement" ):
                listener.enterEndStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndStatement" ):
                listener.exitEndStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndStatement" ):
                return visitor.visitEndStatement(self)
            else:
                return visitor.visitChildren(self)




    def endStatement(self):

        localctx = openpulseParser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(openpulseParser.END)
            self.state = 284
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def FOR(self):
            return self.getToken(openpulseParser.FOR, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.Identifier)
            else:
                return self.getToken(openpulseParser.Identifier, i)

        def IN(self):
            return self.getToken(openpulseParser.IN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def rangeExpression(self):
            return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = openpulseParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(openpulseParser.FOR)
            self.state = 287
            self.scalarType()
            self.state = 288
            self.match(openpulseParser.Identifier)
            self.state = 289
            self.match(openpulseParser.IN)
            self.state = 296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.state = 290
                self.setExpression()
                pass
            elif token in [openpulseParser.LBRACKET]:
                self.state = 291
                self.match(openpulseParser.LBRACKET)
                self.state = 292
                self.rangeExpression()
                self.state = 293
                self.match(openpulseParser.RBRACKET)
                pass
            elif token in [openpulseParser.Identifier]:
                self.state = 295
                self.match(openpulseParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 298
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.if_body = None # StatementOrScopeContext
            self.else_body = None # StatementOrScopeContext

        def IF(self):
            return self.getToken(openpulseParser.IF, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.StatementOrScopeContext)
            else:
                return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,i)


        def ELSE(self):
            return self.getToken(openpulseParser.ELSE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = openpulseParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(openpulseParser.IF)
            self.state = 301
            self.match(openpulseParser.LPAREN)
            self.state = 302
            self.expression(0)
            self.state = 303
            self.match(openpulseParser.RPAREN)
            self.state = 304
            localctx.if_body = self.statementOrScope()
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 305
                self.match(openpulseParser.ELSE)
                self.state = 306
                localctx.else_body = self.statementOrScope()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(openpulseParser.RETURN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = openpulseParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(openpulseParser.RETURN)
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 310
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.state = 311
                self.measureExpression()
                pass
            elif token in [openpulseParser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 314
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # StatementOrScopeContext

        def WHILE(self):
            return self.getToken(openpulseParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def statementOrScope(self):
            return self.getTypedRuleContext(openpulseParser.StatementOrScopeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = openpulseParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(openpulseParser.WHILE)
            self.state = 317
            self.match(openpulseParser.LPAREN)
            self.state = 318
            self.expression(0)
            self.state = 319
            self.match(openpulseParser.RPAREN)
            self.state = 320
            localctx.body = self.statementOrScope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BarrierStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BARRIER(self):
            return self.getToken(openpulseParser.BARRIER, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_barrierStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBarrierStatement" ):
                listener.enterBarrierStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBarrierStatement" ):
                listener.exitBarrierStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBarrierStatement" ):
                return visitor.visitBarrierStatement(self)
            else:
                return visitor.visitChildren(self)




    def barrierStatement(self):

        localctx = openpulseParser.BarrierStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_barrierStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(openpulseParser.BARRIER)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                self.state = 323
                self.gateOperandList()


            self.state = 326
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(openpulseParser.BOX, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_boxStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxStatement" ):
                listener.enterBoxStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxStatement" ):
                listener.exitBoxStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxStatement" ):
                return visitor.visitBoxStatement(self)
            else:
                return visitor.visitChildren(self)




    def boxStatement(self):

        localctx = openpulseParser.BoxStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_boxStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(openpulseParser.BOX)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 329
                self.designator()


            self.state = 332
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelayStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_delayStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayStatement" ):
                listener.enterDelayStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayStatement" ):
                listener.exitDelayStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayStatement" ):
                return visitor.visitDelayStatement(self)
            else:
                return visitor.visitChildren(self)




    def delayStatement(self):

        localctx = openpulseParser.DelayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_delayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(openpulseParser.DELAY)
            self.state = 335
            self.designator()
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                self.state = 336
                self.gateOperandList()


            self.state = 339
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateCallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def gateOperandList(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandListContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def gateModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateModifierContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateModifierContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def GPHASE(self):
            return self.getToken(openpulseParser.GPHASE, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateCallStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateCallStatement" ):
                listener.enterGateCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateCallStatement" ):
                listener.exitGateCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateCallStatement" ):
                return visitor.visitGateCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateCallStatement(self):

        localctx = openpulseParser.GateCallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_gateCallStatement)
        self._la = 0 # Token type
        try:
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL))) != 0):
                    self.state = 341
                    self.gateModifier()
                    self.state = 346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 347
                self.match(openpulseParser.Identifier)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 348
                    self.match(openpulseParser.LPAREN)
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                        self.state = 349
                        self.expressionList()


                    self.state = 352
                    self.match(openpulseParser.RPAREN)


                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 355
                    self.designator()


                self.state = 358
                self.gateOperandList()
                self.state = 359
                self.match(openpulseParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.INV) | (1 << openpulseParser.POW) | (1 << openpulseParser.CTRL) | (1 << openpulseParser.NEGCTRL))) != 0):
                    self.state = 361
                    self.gateModifier()
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 367
                self.match(openpulseParser.GPHASE)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 368
                    self.match(openpulseParser.LPAREN)
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                        self.state = 369
                        self.expressionList()


                    self.state = 372
                    self.match(openpulseParser.RPAREN)


                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 375
                    self.designator()


                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit:
                    self.state = 378
                    self.gateOperandList()


                self.state = 381
                self.match(openpulseParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureArrowAssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureArrowAssignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureArrowAssignmentStatement" ):
                listener.enterMeasureArrowAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureArrowAssignmentStatement" ):
                listener.exitMeasureArrowAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureArrowAssignmentStatement" ):
                return visitor.visitMeasureArrowAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def measureArrowAssignmentStatement(self):

        localctx = openpulseParser.MeasureArrowAssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_measureArrowAssignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.measureExpression()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 385
                self.match(openpulseParser.ARROW)
                self.state = 386
                self.indexedIdentifier()


            self.state = 389
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = openpulseParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(openpulseParser.RESET)
            self.state = 392
            self.gateOperand()
            self.state = 393
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(openpulseParser.LET, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def aliasExpression(self):
            return self.getTypedRuleContext(openpulseParser.AliasExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDeclarationStatement" ):
                listener.enterAliasDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDeclarationStatement" ):
                listener.exitAliasDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasDeclarationStatement" ):
                return visitor.visitAliasDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def aliasDeclarationStatement(self):

        localctx = openpulseParser.AliasDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_aliasDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(openpulseParser.LET)
            self.state = 396
            self.match(openpulseParser.Identifier)
            self.state = 397
            self.match(openpulseParser.EQUALS)
            self.state = 398
            self.aliasExpression()
            self.state = 399
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassicalDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_classicalDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassicalDeclarationStatement" ):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassicalDeclarationStatement" ):
                listener.exitClassicalDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassicalDeclarationStatement" ):
                return visitor.visitClassicalDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def classicalDeclarationStatement(self):

        localctx = openpulseParser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classicalDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.state = 401
                self.scalarType()
                pass
            elif token in [openpulseParser.ARRAY]:
                self.state = 402
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 405
            self.match(openpulseParser.Identifier)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.EQUALS:
                self.state = 406
                self.match(openpulseParser.EQUALS)
                self.state = 407
                self.declarationExpression()


            self.state = 410
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(openpulseParser.CONST, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def declarationExpression(self):
            return self.getTypedRuleContext(openpulseParser.DeclarationExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_constDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclarationStatement" ):
                listener.enterConstDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclarationStatement" ):
                listener.exitConstDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDeclarationStatement" ):
                return visitor.visitConstDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def constDeclarationStatement(self):

        localctx = openpulseParser.ConstDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(openpulseParser.CONST)
            self.state = 413
            self.scalarType()
            self.state = 414
            self.match(openpulseParser.Identifier)
            self.state = 415
            self.match(openpulseParser.EQUALS)
            self.state = 416
            self.declarationExpression()
            self.state = 417
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IoDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def INPUT(self):
            return self.getToken(openpulseParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(openpulseParser.OUTPUT, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_ioDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIoDeclarationStatement" ):
                listener.enterIoDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIoDeclarationStatement" ):
                listener.exitIoDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIoDeclarationStatement" ):
                return visitor.visitIoDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def ioDeclarationStatement(self):

        localctx = openpulseParser.IoDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ioDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            _la = self._input.LA(1)
            if not(_la==openpulseParser.INPUT or _la==openpulseParser.OUTPUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.state = 420
                self.scalarType()
                pass
            elif token in [openpulseParser.ARRAY]:
                self.state = 421
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 424
            self.match(openpulseParser.Identifier)
            self.state = 425
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldStyleDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_oldStyleDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldStyleDeclarationStatement" ):
                listener.enterOldStyleDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldStyleDeclarationStatement" ):
                listener.exitOldStyleDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldStyleDeclarationStatement" ):
                return visitor.visitOldStyleDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def oldStyleDeclarationStatement(self):

        localctx = openpulseParser.OldStyleDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oldStyleDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            _la = self._input.LA(1)
            if not(_la==openpulseParser.QREG or _la==openpulseParser.CREG):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 428
            self.match(openpulseParser.Identifier)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 429
                self.designator()


            self.state = 432
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantumDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_quantumDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantumDeclarationStatement" ):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantumDeclarationStatement" ):
                listener.exitQuantumDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantumDeclarationStatement" ):
                return visitor.visitQuantumDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def quantumDeclarationStatement(self):

        localctx = openpulseParser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.qubitType()
            self.state = 435
            self.match(openpulseParser.Identifier)
            self.state = 436
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(openpulseParser.DEF, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def argumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefStatement" ):
                listener.enterDefStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefStatement" ):
                listener.exitDefStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefStatement" ):
                return visitor.visitDefStatement(self)
            else:
                return visitor.visitChildren(self)




    def defStatement(self):

        localctx = openpulseParser.DefStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_defStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(openpulseParser.DEF)
            self.state = 439
            self.match(openpulseParser.Identifier)
            self.state = 440
            self.match(openpulseParser.LPAREN)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH))) != 0):
                self.state = 441
                self.argumentDefinitionList()


            self.state = 444
            self.match(openpulseParser.RPAREN)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 445
                self.returnSignature()


            self.state = 448
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERN(self):
            return self.getToken(openpulseParser.EXTERN, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def externArgumentList(self):
            return self.getTypedRuleContext(openpulseParser.ExternArgumentListContext,0)


        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternStatement" ):
                listener.enterExternStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternStatement" ):
                listener.exitExternStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternStatement" ):
                return visitor.visitExternStatement(self)
            else:
                return visitor.visitChildren(self)




    def externStatement(self):

        localctx = openpulseParser.ExternStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_externStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(openpulseParser.EXTERN)
            self.state = 451
            self.match(openpulseParser.Identifier)
            self.state = 452
            self.match(openpulseParser.LPAREN)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH))) != 0):
                self.state = 453
                self.externArgumentList()


            self.state = 456
            self.match(openpulseParser.RPAREN)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 457
                self.returnSignature()


            self.state = 460
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # IdentifierListContext
            self.qubits = None # IdentifierListContext

        def GATE(self):
            return self.getToken(openpulseParser.GATE, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)


        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IdentifierListContext,i)


        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateStatement" ):
                listener.enterGateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateStatement" ):
                listener.exitGateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateStatement" ):
                return visitor.visitGateStatement(self)
            else:
                return visitor.visitChildren(self)




    def gateStatement(self):

        localctx = openpulseParser.GateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_gateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(openpulseParser.GATE)
            self.state = 463
            self.match(openpulseParser.Identifier)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LPAREN:
                self.state = 464
                self.match(openpulseParser.LPAREN)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.Identifier:
                    self.state = 465
                    localctx.params = self.identifierList()


                self.state = 468
                self.match(openpulseParser.RPAREN)


            self.state = 471
            localctx.qubits = self.identifierList()
            self.state = 472
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def CompoundAssignmentOperator(self):
            return self.getToken(openpulseParser.CompoundAssignmentOperator, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_assignmentStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentStatement" ):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentStatement" ):
                listener.exitAssignmentStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentStatement" ):
                return visitor.visitAssignmentStatement(self)
            else:
                return visitor.visitChildren(self)




    def assignmentStatement(self):

        localctx = openpulseParser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_assignmentStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.indexedIdentifier()
            self.state = 475
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==openpulseParser.EQUALS or _la==openpulseParser.CompoundAssignmentOperator):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 476
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.state = 477
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 480
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(openpulseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = openpulseParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.expression(0)
            self.state = 483
            self.match(openpulseParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAL(self):
            return self.getToken(openpulseParser.CAL, 0)

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_calStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalStatement" ):
                listener.enterCalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalStatement" ):
                listener.exitCalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCalStatement" ):
                return visitor.visitCalStatement(self)
            else:
                return visitor.visitChildren(self)




    def calStatement(self):

        localctx = openpulseParser.CalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_calStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(openpulseParser.CAL)
            self.state = 486
            self.match(openpulseParser.LBRACE)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.CalibrationBlock:
                self.state = 487
                self.match(openpulseParser.CalibrationBlock)


            self.state = 490
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFCAL(self):
            return self.getToken(openpulseParser.DEFCAL, 0)

        def defcalTarget(self):
            return self.getTypedRuleContext(openpulseParser.DefcalTargetContext,0)


        def defcalOperandList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalOperandListContext,0)


        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(openpulseParser.ReturnSignatureContext,0)


        def CalibrationBlock(self):
            return self.getToken(openpulseParser.CalibrationBlock, 0)

        def defcalArgumentDefinitionList(self):
            return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionListContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalStatement" ):
                listener.enterDefcalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalStatement" ):
                listener.exitDefcalStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalStatement" ):
                return visitor.visitDefcalStatement(self)
            else:
                return visitor.visitChildren(self)




    def defcalStatement(self):

        localctx = openpulseParser.DefcalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_defcalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(openpulseParser.DEFCAL)
            self.state = 493
            self.defcalTarget()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LPAREN:
                self.state = 494
                self.match(openpulseParser.LPAREN)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.READONLY) | (1 << openpulseParser.MUTABLE) | (1 << openpulseParser.QREG) | (1 << openpulseParser.QUBIT) | (1 << openpulseParser.CREG) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                    self.state = 495
                    self.defcalArgumentDefinitionList()


                self.state = 498
                self.match(openpulseParser.RPAREN)


            self.state = 501
            self.defcalOperandList()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.ARROW:
                self.state = 502
                self.returnSignature()


            self.state = 505
            self.match(openpulseParser.LBRACE)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.CalibrationBlock:
                self.state = 506
                self.match(openpulseParser.CalibrationBlock)


            self.state = 509
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openpulseParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseXorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(openpulseParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpression" ):
                listener.enterBitwiseXorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpression" ):
                listener.exitBitwiseXorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseXorExpression" ):
                return visitor.visitBitwiseXorExpression(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(openpulseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)


    class DurationofExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DURATIONOF(self):
            return self.getToken(openpulseParser.DURATIONOF, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def scope(self):
            return self.getTypedRuleContext(openpulseParser.ScopeContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationofExpression" ):
                listener.enterDurationofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationofExpression" ):
                listener.exitDurationofExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationofExpression" ):
                return visitor.visitDurationofExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisExpression" ):
                return visitor.visitParenthesisExpression(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ComparisonOperator(self):
            return self.getToken(openpulseParser.ComparisonOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpression" ):
                return visitor.visitComparisonExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(openpulseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(openpulseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(openpulseParser.PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_PIPE(self):
            return self.getToken(openpulseParser.DOUBLE_PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)

        def arrayType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_ASTERISK(self):
            return self.getToken(openpulseParser.DOUBLE_ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpression" ):
                return visitor.visitPowerExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseOrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def PIPE(self):
            return self.getToken(openpulseParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpression" ):
                listener.enterBitwiseOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpression" ):
                listener.exitBitwiseOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseOrExpression" ):
                return visitor.visitBitwiseOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CallExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitshiftExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def BitshiftOperator(self):
            return self.getToken(openpulseParser.BitshiftOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitshiftExpression" ):
                listener.enterBitshiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitshiftExpression" ):
                listener.exitBitshiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitshiftExpression" ):
                return visitor.visitBitshiftExpression(self)
            else:
                return visitor.visitChildren(self)


    class BitwiseAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def AMPERSAND(self):
            return self.getToken(openpulseParser.AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpression" ):
                listener.enterBitwiseAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpression" ):
                listener.exitBitwiseAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseAndExpression" ):
                return visitor.visitBitwiseAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def EqualityOperator(self):
            return self.getToken(openpulseParser.EqualityOperator, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalAndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)

        def DOUBLE_AMPERSAND(self):
            return self.getToken(openpulseParser.DOUBLE_AMPERSAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class IndexExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def indexOperator(self):
            return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexExpression" ):
                listener.enterIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexExpression" ):
                listener.exitIndexExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexExpression" ):
                return visitor.visitIndexExpression(self)
            else:
                return visitor.visitChildren(self)


    class UnaryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)

        def TILDE(self):
            return self.getToken(openpulseParser.TILDE, 0)
        def EXCLAMATION_POINT(self):
            return self.getToken(openpulseParser.EXCLAMATION_POINT, 0)
        def MINUS(self):
            return self.getToken(openpulseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openpulseParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)
        def BinaryIntegerLiteral(self):
            return self.getToken(openpulseParser.BinaryIntegerLiteral, 0)
        def OctalIntegerLiteral(self):
            return self.getToken(openpulseParser.OctalIntegerLiteral, 0)
        def DecimalIntegerLiteral(self):
            return self.getToken(openpulseParser.DecimalIntegerLiteral, 0)
        def HexIntegerLiteral(self):
            return self.getToken(openpulseParser.HexIntegerLiteral, 0)
        def FloatLiteral(self):
            return self.getToken(openpulseParser.FloatLiteral, 0)
        def ImaginaryLiteral(self):
            return self.getToken(openpulseParser.ImaginaryLiteral, 0)
        def BooleanLiteral(self):
            return self.getToken(openpulseParser.BooleanLiteral, 0)
        def BitstringLiteral(self):
            return self.getToken(openpulseParser.BitstringLiteral, 0)
        def TimingLiteral(self):
            return self.getToken(openpulseParser.TimingLiteral, 0)
        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpression" ):
                return visitor.visitLiteralExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openpulseParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = openpulseParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 512
                self.match(openpulseParser.LPAREN)
                self.state = 513
                self.expression(0)
                self.state = 514
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = openpulseParser.UnaryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 516
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 517
                self.expression(15)
                pass

            elif la_ == 3:
                localctx = openpulseParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 520
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                    self.state = 518
                    self.scalarType()
                    pass
                elif token in [openpulseParser.ARRAY]:
                    self.state = 519
                    self.arrayType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 522
                self.match(openpulseParser.LPAREN)
                self.state = 523
                self.expression(0)
                self.state = 524
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = openpulseParser.DurationofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 526
                self.match(openpulseParser.DURATIONOF)
                self.state = 527
                self.match(openpulseParser.LPAREN)
                self.state = 528
                self.scope()
                self.state = 529
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = openpulseParser.CallExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 531
                self.match(openpulseParser.Identifier)
                self.state = 532
                self.match(openpulseParser.LPAREN)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                    self.state = 533
                    self.expressionList()


                self.state = 536
                self.match(openpulseParser.RPAREN)
                pass

            elif la_ == 6:
                localctx = openpulseParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 537
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (openpulseParser.BooleanLiteral - 55)) | (1 << (openpulseParser.ImaginaryLiteral - 55)) | (1 << (openpulseParser.BinaryIntegerLiteral - 55)) | (1 << (openpulseParser.OctalIntegerLiteral - 55)) | (1 << (openpulseParser.DecimalIntegerLiteral - 55)) | (1 << (openpulseParser.HexIntegerLiteral - 55)) | (1 << (openpulseParser.Identifier - 55)) | (1 << (openpulseParser.HardwareQubit - 55)) | (1 << (openpulseParser.FloatLiteral - 55)) | (1 << (openpulseParser.TimingLiteral - 55)) | (1 << (openpulseParser.BitstringLiteral - 55)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 577
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 575
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                    if la_ == 1:
                        localctx = openpulseParser.PowerExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 540
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 541
                        localctx.op = self.match(openpulseParser.DOUBLE_ASTERISK)
                        self.state = 542
                        self.expression(16)
                        pass

                    elif la_ == 2:
                        localctx = openpulseParser.MultiplicativeExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 543
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 544
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (openpulseParser.ASTERISK - 71)) | (1 << (openpulseParser.SLASH - 71)) | (1 << (openpulseParser.PERCENT - 71)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 545
                        self.expression(15)
                        pass

                    elif la_ == 3:
                        localctx = openpulseParser.AdditiveExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 546
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 547
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==openpulseParser.PLUS or _la==openpulseParser.MINUS):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 548
                        self.expression(14)
                        pass

                    elif la_ == 4:
                        localctx = openpulseParser.BitshiftExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 549
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 550
                        localctx.op = self.match(openpulseParser.BitshiftOperator)
                        self.state = 551
                        self.expression(13)
                        pass

                    elif la_ == 5:
                        localctx = openpulseParser.ComparisonExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 552
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 553
                        localctx.op = self.match(openpulseParser.ComparisonOperator)
                        self.state = 554
                        self.expression(12)
                        pass

                    elif la_ == 6:
                        localctx = openpulseParser.EqualityExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 555
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 556
                        localctx.op = self.match(openpulseParser.EqualityOperator)
                        self.state = 557
                        self.expression(11)
                        pass

                    elif la_ == 7:
                        localctx = openpulseParser.BitwiseAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 558
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 559
                        localctx.op = self.match(openpulseParser.AMPERSAND)
                        self.state = 560
                        self.expression(10)
                        pass

                    elif la_ == 8:
                        localctx = openpulseParser.BitwiseXorExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 561
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 562
                        localctx.op = self.match(openpulseParser.CARET)
                        self.state = 563
                        self.expression(9)
                        pass

                    elif la_ == 9:
                        localctx = openpulseParser.BitwiseOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 564
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 565
                        localctx.op = self.match(openpulseParser.PIPE)
                        self.state = 566
                        self.expression(8)
                        pass

                    elif la_ == 10:
                        localctx = openpulseParser.LogicalAndExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 567
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 568
                        localctx.op = self.match(openpulseParser.DOUBLE_AMPERSAND)
                        self.state = 569
                        self.expression(7)
                        pass

                    elif la_ == 11:
                        localctx = openpulseParser.LogicalOrExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 570
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 571
                        localctx.op = self.match(openpulseParser.DOUBLE_PIPE)
                        self.state = 572
                        self.expression(6)
                        pass

                    elif la_ == 12:
                        localctx = openpulseParser.IndexExpressionContext(self, openpulseParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 573
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 574
                        self.indexOperator()
                        pass

             
                self.state = 579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AliasExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def DOUBLE_PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.DOUBLE_PLUS)
            else:
                return self.getToken(openpulseParser.DOUBLE_PLUS, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_aliasExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasExpression" ):
                listener.enterAliasExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasExpression" ):
                listener.exitAliasExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasExpression" ):
                return visitor.visitAliasExpression(self)
            else:
                return visitor.visitChildren(self)




    def aliasExpression(self):

        localctx = openpulseParser.AliasExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aliasExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.expression(0)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openpulseParser.DOUBLE_PLUS:
                self.state = 581
                self.match(openpulseParser.DOUBLE_PLUS)
                self.state = 582
                self.expression(0)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def measureExpression(self):
            return self.getTypedRuleContext(openpulseParser.MeasureExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_declarationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationExpression" ):
                listener.enterDeclarationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationExpression" ):
                listener.exitDeclarationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationExpression" ):
                return visitor.visitDeclarationExpression(self)
            else:
                return visitor.visitChildren(self)




    def declarationExpression(self):

        localctx = openpulseParser.DeclarationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_declarationExpression)
        try:
            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.arrayLiteral()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.expression(0)
                pass
            elif token in [openpulseParser.MEASURE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.measureExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasureExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def gateOperand(self):
            return self.getTypedRuleContext(openpulseParser.GateOperandContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_measureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasureExpression" ):
                listener.enterMeasureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasureExpression" ):
                listener.exitMeasureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeasureExpression" ):
                return visitor.visitMeasureExpression(self)
            else:
                return visitor.visitChildren(self)




    def measureExpression(self):

        localctx = openpulseParser.MeasureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_measureExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(openpulseParser.MEASURE)
            self.state = 594
            self.gateOperand()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COLON)
            else:
                return self.getToken(openpulseParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = openpulseParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_rangeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 596
                self.expression(0)


            self.state = 599
            self.match(openpulseParser.COLON)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openpulseParser.WAVEFORM) | (1 << openpulseParser.PORT) | (1 << openpulseParser.FRAME) | (1 << openpulseParser.BOOL) | (1 << openpulseParser.BIT) | (1 << openpulseParser.INT) | (1 << openpulseParser.UINT) | (1 << openpulseParser.FLOAT) | (1 << openpulseParser.ANGLE) | (1 << openpulseParser.COMPLEX) | (1 << openpulseParser.ARRAY) | (1 << openpulseParser.DURATION) | (1 << openpulseParser.STRETCH) | (1 << openpulseParser.DURATIONOF) | (1 << openpulseParser.BooleanLiteral) | (1 << openpulseParser.LPAREN))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (openpulseParser.MINUS - 70)) | (1 << (openpulseParser.TILDE - 70)) | (1 << (openpulseParser.EXCLAMATION_POINT - 70)) | (1 << (openpulseParser.ImaginaryLiteral - 70)) | (1 << (openpulseParser.BinaryIntegerLiteral - 70)) | (1 << (openpulseParser.OctalIntegerLiteral - 70)) | (1 << (openpulseParser.DecimalIntegerLiteral - 70)) | (1 << (openpulseParser.HexIntegerLiteral - 70)) | (1 << (openpulseParser.Identifier - 70)) | (1 << (openpulseParser.HardwareQubit - 70)) | (1 << (openpulseParser.FloatLiteral - 70)) | (1 << (openpulseParser.TimingLiteral - 70)) | (1 << (openpulseParser.BitstringLiteral - 70)))) != 0):
                self.state = 600
                self.expression(0)


            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COLON:
                self.state = 603
                self.match(openpulseParser.COLON)
                self.state = 604
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_setExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpression" ):
                listener.enterSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpression" ):
                listener.exitSetExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExpression" ):
                return visitor.visitSetExpression(self)
            else:
                return visitor.visitChildren(self)




    def setExpression(self):

        localctx = openpulseParser.SetExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_setExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(openpulseParser.LBRACE)
            self.state = 608
            self.expression(0)
            self.state = 613
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 609
                    self.match(openpulseParser.COMMA)
                    self.state = 610
                    self.expression(0) 
                self.state = 615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 616
                self.match(openpulseParser.COMMA)


            self.state = 619
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(openpulseParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(openpulseParser.RBRACE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def arrayLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArrayLiteralContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArrayLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = openpulseParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(openpulseParser.LBRACE)
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 622
                self.expression(0)
                pass
            elif token in [openpulseParser.LBRACE]:
                self.state = 623
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 626
                    self.match(openpulseParser.COMMA)
                    self.state = 629
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                        self.state = 627
                        self.expression(0)
                        pass
                    elif token in [openpulseParser.LBRACE]:
                        self.state = 628
                        self.arrayLiteral()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 636
                self.match(openpulseParser.COMMA)


            self.state = 639
            self.match(openpulseParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def setExpression(self):
            return self.getTypedRuleContext(openpulseParser.SetExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.RangeExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_indexOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOperator" ):
                listener.enterIndexOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOperator" ):
                listener.exitIndexOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOperator" ):
                return visitor.visitIndexOperator(self)
            else:
                return visitor.visitChildren(self)




    def indexOperator(self):

        localctx = openpulseParser.IndexOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(openpulseParser.LBRACKET)
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.LBRACE]:
                self.state = 642
                self.setExpression()
                pass
            elif token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.COLON, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 644
                    self.rangeExpression()
                    pass


                self.state = 654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 647
                        self.match(openpulseParser.COMMA)
                        self.state = 650
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                        if la_ == 1:
                            self.state = 648
                            self.expression(0)
                            pass

                        elif la_ == 2:
                            self.state = 649
                            self.rangeExpression()
                            pass

                 
                    self.state = 656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.COMMA:
                    self.state = 657
                    self.match(openpulseParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 662
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def indexOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.IndexOperatorContext)
            else:
                return self.getTypedRuleContext(openpulseParser.IndexOperatorContext,i)


        def getRuleIndex(self):
            return openpulseParser.RULE_indexedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedIdentifier" ):
                listener.enterIndexedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedIdentifier" ):
                listener.exitIndexedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedIdentifier" ):
                return visitor.visitIndexedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def indexedIdentifier(self):

        localctx = openpulseParser.IndexedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_indexedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(openpulseParser.Identifier)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openpulseParser.LBRACKET:
                self.state = 665
                self.indexOperator()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnSignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(openpulseParser.ARROW, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_returnSignature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnSignature" ):
                listener.enterReturnSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnSignature" ):
                listener.exitReturnSignature(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnSignature" ):
                return visitor.visitReturnSignature(self)
            else:
                return visitor.visitChildren(self)




    def returnSignature(self):

        localctx = openpulseParser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(openpulseParser.ARROW)
            self.state = 672
            self.scalarType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(openpulseParser.AT, 0)

        def INV(self):
            return self.getToken(openpulseParser.INV, 0)

        def POW(self):
            return self.getToken(openpulseParser.POW, 0)

        def LPAREN(self):
            return self.getToken(openpulseParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(openpulseParser.RPAREN, 0)

        def CTRL(self):
            return self.getToken(openpulseParser.CTRL, 0)

        def NEGCTRL(self):
            return self.getToken(openpulseParser.NEGCTRL, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateModifier" ):
                listener.enterGateModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateModifier" ):
                listener.exitGateModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateModifier" ):
                return visitor.visitGateModifier(self)
            else:
                return visitor.visitChildren(self)




    def gateModifier(self):

        localctx = openpulseParser.GateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_gateModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.INV]:
                self.state = 674
                self.match(openpulseParser.INV)
                pass
            elif token in [openpulseParser.POW]:
                self.state = 675
                self.match(openpulseParser.POW)
                self.state = 676
                self.match(openpulseParser.LPAREN)
                self.state = 677
                self.expression(0)
                self.state = 678
                self.match(openpulseParser.RPAREN)
                pass
            elif token in [openpulseParser.CTRL, openpulseParser.NEGCTRL]:
                self.state = 680
                _la = self._input.LA(1)
                if not(_la==openpulseParser.CTRL or _la==openpulseParser.NEGCTRL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LPAREN:
                    self.state = 681
                    self.match(openpulseParser.LPAREN)
                    self.state = 682
                    self.expression(0)
                    self.state = 683
                    self.match(openpulseParser.RPAREN)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 689
            self.match(openpulseParser.AT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QubitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUBIT(self):
            return self.getToken(openpulseParser.QUBIT, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_qubitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQubitType" ):
                listener.enterQubitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQubitType" ):
                listener.exitQubitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQubitType" ):
                return visitor.visitQubitType(self)
            else:
                return visitor.visitChildren(self)




    def qubitType(self):

        localctx = openpulseParser.QubitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_qubitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(openpulseParser.QUBIT)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.LBRACKET:
                self.state = 692
                self.designator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = openpulseParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(openpulseParser.ARRAY)
            self.state = 696
            self.match(openpulseParser.LBRACKET)
            self.state = 697
            self.scalarType()
            self.state = 698
            self.match(openpulseParser.COMMA)
            self.state = 699
            self.expressionList()
            self.state = 700
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(openpulseParser.ARRAY, 0)

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def COMMA(self):
            return self.getToken(openpulseParser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def READONLY(self):
            return self.getToken(openpulseParser.READONLY, 0)

        def MUTABLE(self):
            return self.getToken(openpulseParser.MUTABLE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionListContext,0)


        def DIM(self):
            return self.getToken(openpulseParser.DIM, 0)

        def EQUALS(self):
            return self.getToken(openpulseParser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_arrayReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayReferenceType" ):
                listener.enterArrayReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayReferenceType" ):
                listener.exitArrayReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayReferenceType" ):
                return visitor.visitArrayReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def arrayReferenceType(self):

        localctx = openpulseParser.ArrayReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayReferenceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            _la = self._input.LA(1)
            if not(_la==openpulseParser.READONLY or _la==openpulseParser.MUTABLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 703
            self.match(openpulseParser.ARRAY)
            self.state = 704
            self.match(openpulseParser.LBRACKET)
            self.state = 705
            self.scalarType()
            self.state = 706
            self.match(openpulseParser.COMMA)
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.ARRAY, openpulseParser.DURATION, openpulseParser.STRETCH, openpulseParser.DURATIONOF, openpulseParser.BooleanLiteral, openpulseParser.LPAREN, openpulseParser.MINUS, openpulseParser.TILDE, openpulseParser.EXCLAMATION_POINT, openpulseParser.ImaginaryLiteral, openpulseParser.BinaryIntegerLiteral, openpulseParser.OctalIntegerLiteral, openpulseParser.DecimalIntegerLiteral, openpulseParser.HexIntegerLiteral, openpulseParser.Identifier, openpulseParser.HardwareQubit, openpulseParser.FloatLiteral, openpulseParser.TimingLiteral, openpulseParser.BitstringLiteral]:
                self.state = 707
                self.expressionList()
                pass
            elif token in [openpulseParser.DIM]:
                self.state = 708
                self.match(openpulseParser.DIM)
                self.state = 709
                self.match(openpulseParser.EQUALS)
                self.state = 710
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 713
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(openpulseParser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def RBRACKET(self):
            return self.getToken(openpulseParser.RBRACKET, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = openpulseParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(openpulseParser.LBRACKET)
            self.state = 716
            self.expression(0)
            self.state = 717
            self.match(openpulseParser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURE(self):
            return self.getToken(openpulseParser.MEASURE, 0)

        def RESET(self):
            return self.getToken(openpulseParser.RESET, 0)

        def DELAY(self):
            return self.getToken(openpulseParser.DELAY, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalTarget" ):
                listener.enterDefcalTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalTarget" ):
                listener.exitDefcalTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalTarget" ):
                return visitor.visitDefcalTarget(self)
            else:
                return visitor.visitChildren(self)




    def defcalTarget(self):

        localctx = openpulseParser.DefcalTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_defcalTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (openpulseParser.DELAY - 51)) | (1 << (openpulseParser.RESET - 51)) | (1 << (openpulseParser.MEASURE - 51)) | (1 << (openpulseParser.Identifier - 51)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openpulseParser.ExpressionContext,0)


        def argumentDefinition(self):
            return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinition" ):
                listener.enterDefcalArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinition" ):
                listener.exitDefcalArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinition" ):
                return visitor.visitDefcalArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinition(self):

        localctx = openpulseParser.DefcalArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_defcalArgumentDefinition)
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.argumentDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperand" ):
                listener.enterDefcalOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperand" ):
                listener.exitDefcalOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperand" ):
                return visitor.visitDefcalOperand(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperand(self):

        localctx = openpulseParser.DefcalOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_defcalOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            _la = self._input.LA(1)
            if not(_la==openpulseParser.Identifier or _la==openpulseParser.HardwareQubit):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexedIdentifier(self):
            return self.getTypedRuleContext(openpulseParser.IndexedIdentifierContext,0)


        def HardwareQubit(self):
            return self.getToken(openpulseParser.HardwareQubit, 0)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperand" ):
                listener.enterGateOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperand" ):
                listener.exitGateOperand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperand" ):
                return visitor.visitGateOperand(self)
            else:
                return visitor.visitChildren(self)




    def gateOperand(self):

        localctx = openpulseParser.GateOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gateOperand)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.indexedIdentifier()
                pass
            elif token in [openpulseParser.HardwareQubit]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(openpulseParser.HardwareQubit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_externArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgument" ):
                listener.enterExternArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgument" ):
                listener.exitExternArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgument" ):
                return visitor.visitExternArgument(self)
            else:
                return visitor.visitChildren(self)




    def externArgument(self):

        localctx = openpulseParser.ExternArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_externArgument)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.scalarType()
                pass
            elif token in [openpulseParser.READONLY, openpulseParser.MUTABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.arrayReferenceType()
                pass
            elif token in [openpulseParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 733
                self.match(openpulseParser.CREG)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 734
                    self.designator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(openpulseParser.ScalarTypeContext,0)


        def Identifier(self):
            return self.getToken(openpulseParser.Identifier, 0)

        def qubitType(self):
            return self.getTypedRuleContext(openpulseParser.QubitTypeContext,0)


        def CREG(self):
            return self.getToken(openpulseParser.CREG, 0)

        def QREG(self):
            return self.getToken(openpulseParser.QREG, 0)

        def designator(self):
            return self.getTypedRuleContext(openpulseParser.DesignatorContext,0)


        def arrayReferenceType(self):
            return self.getTypedRuleContext(openpulseParser.ArrayReferenceTypeContext,0)


        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinition" ):
                listener.enterArgumentDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinition" ):
                listener.exitArgumentDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinition" ):
                return visitor.visitArgumentDefinition(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinition(self):

        localctx = openpulseParser.ArgumentDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_argumentDefinition)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openpulseParser.WAVEFORM, openpulseParser.PORT, openpulseParser.FRAME, openpulseParser.BOOL, openpulseParser.BIT, openpulseParser.INT, openpulseParser.UINT, openpulseParser.FLOAT, openpulseParser.ANGLE, openpulseParser.COMPLEX, openpulseParser.DURATION, openpulseParser.STRETCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.scalarType()
                self.state = 740
                self.match(openpulseParser.Identifier)
                pass
            elif token in [openpulseParser.QUBIT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.qubitType()
                self.state = 743
                self.match(openpulseParser.Identifier)
                pass
            elif token in [openpulseParser.QREG, openpulseParser.CREG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                _la = self._input.LA(1)
                if not(_la==openpulseParser.QREG or _la==openpulseParser.CREG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 746
                self.match(openpulseParser.Identifier)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openpulseParser.LBRACKET:
                    self.state = 747
                    self.designator()


                pass
            elif token in [openpulseParser.READONLY, openpulseParser.MUTABLE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 750
                self.arrayReferenceType()
                self.state = 751
                self.match(openpulseParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_argumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentDefinitionList" ):
                listener.enterArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentDefinitionList" ):
                listener.exitArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentDefinitionList" ):
                return visitor.visitArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentDefinitionList(self):

        localctx = openpulseParser.ArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_argumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.argumentDefinition()
            self.state = 760
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 756
                    self.match(openpulseParser.COMMA)
                    self.state = 757
                    self.argumentDefinition() 
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 763
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalArgumentDefinitionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalArgumentDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalArgumentDefinitionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalArgumentDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalArgumentDefinitionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalArgumentDefinitionList" ):
                listener.enterDefcalArgumentDefinitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalArgumentDefinitionList" ):
                listener.exitDefcalArgumentDefinitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalArgumentDefinitionList" ):
                return visitor.visitDefcalArgumentDefinitionList(self)
            else:
                return visitor.visitChildren(self)




    def defcalArgumentDefinitionList(self):

        localctx = openpulseParser.DefcalArgumentDefinitionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_defcalArgumentDefinitionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.defcalArgumentDefinition()
            self.state = 771
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 767
                    self.match(openpulseParser.COMMA)
                    self.state = 768
                    self.defcalArgumentDefinition() 
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 774
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefcalOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defcalOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.DefcalOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.DefcalOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_defcalOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefcalOperandList" ):
                listener.enterDefcalOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefcalOperandList" ):
                listener.exitDefcalOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefcalOperandList" ):
                return visitor.visitDefcalOperandList(self)
            else:
                return visitor.visitChildren(self)




    def defcalOperandList(self):

        localctx = openpulseParser.DefcalOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_defcalOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.defcalOperand()
            self.state = 782
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 778
                    self.match(openpulseParser.COMMA)
                    self.state = 779
                    self.defcalOperand() 
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 785
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = openpulseParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.expression(0)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self.match(openpulseParser.COMMA)
                    self.state = 790
                    self.expression(0) 
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 796
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.Identifier)
            else:
                return self.getToken(openpulseParser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = openpulseParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(openpulseParser.Identifier)
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self.match(openpulseParser.COMMA)
                    self.state = 801
                    self.match(openpulseParser.Identifier) 
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 807
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GateOperandListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gateOperand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.GateOperandContext)
            else:
                return self.getTypedRuleContext(openpulseParser.GateOperandContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_gateOperandList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGateOperandList" ):
                listener.enterGateOperandList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGateOperandList" ):
                listener.exitGateOperandList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGateOperandList" ):
                return visitor.visitGateOperandList(self)
            else:
                return visitor.visitChildren(self)




    def gateOperandList(self):

        localctx = openpulseParser.GateOperandListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_gateOperandList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.gateOperand()
            self.state = 815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 811
                    self.match(openpulseParser.COMMA)
                    self.state = 812
                    self.gateOperand() 
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 818
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openpulseParser.ExternArgumentContext)
            else:
                return self.getTypedRuleContext(openpulseParser.ExternArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(openpulseParser.COMMA)
            else:
                return self.getToken(openpulseParser.COMMA, i)

        def getRuleIndex(self):
            return openpulseParser.RULE_externArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternArgumentList" ):
                listener.enterExternArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternArgumentList" ):
                listener.exitExternArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternArgumentList" ):
                return visitor.visitExternArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def externArgumentList(self):

        localctx = openpulseParser.ExternArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_externArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.externArgument()
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 822
                    self.match(openpulseParser.COMMA)
                    self.state = 823
                    self.externArgument() 
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openpulseParser.COMMA:
                self.state = 829
                self.match(openpulseParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 17)
         




